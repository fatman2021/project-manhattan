CASE &H07 ' texture and material settings 
        SELECT CASE mem64(sys_offset+&HC8)                      
			   CASE &H00: textype   = "'NONE'"
			   CASE &H01: textype   = "'BLEND'"
			   CASE &H02: textype   = "'CLOUDS'"
			   CASE &H03: textype   = "'DISTORTED_NOISE'"
			   CASE &H04: textype   = "'ENVIRONMENT_MAP'"
			   CASE &H05: textype   = "'IMAGE'"
			   CASE &H06: textype   = "'MAGIC'"
			   CASE &H07: textype   = "'MARBLE'"
			   CASE &H08: textype   = "'MUSGRAVE'"
			   CASE &H09: textype   = "'NOISE'"
			   CASE &H0A: textype   = "'OCEAN'"
			   CASE &H0B: textype   = "'POINT_DENSITY'"
			   CASE &H0C: textype   = "'STUCCI'"
			   CASE &H0D: textype   = "'VORONOI'"
			   CASE &H0E: textype   = "'VOXEL_DATA'"
			   CASE &H0F: textype   = "'WOOD'"
			   CASE &H10: material  = "Add"
						  shader    = "ShaderNodeAddShader"
						  node      = "Add Shader"
						  ninput    = "Surface"
						  noutput   = "Shader"
			   CASE &H11: material  = "Ambient"
						  shader    = "ShaderNodeAmbientOcclusion"
						  node      = "Ambient Occlusion"
						  ninput    = "Surface"
						  noutput   = "AO"
			   CASE &H12: material  = "Antisotropic"
						  shader    = "ShaderNodeBsdfAnisotropic"
						  node      = "Anisotropic BSDF"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H13: material  = "Background"
						  shader    = "ShaderNodeBackground"
			   CASE &H14: material  = "Deffuse"
						  shader    = "ShaderNodeBsdfDiffuse"
						  node      = "Diffuse BSDF"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H15: material  = "Emission"
						  shader    = "ShaderNodeEmission"
						  node      = "Emission"
						  ninput    = "Surface"
						  noutput   = "Emission"
			   CASE &H16: material  = "Glass"
						  shader    = "ShaderNodeBsdfGlass"
						  node      = "Glass BSDF"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H17: material  = "Glossy"
						  shader    = "ShaderNodeBsdfGlossy"
						  node      = "Glossy BSDF"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H18: material  = "Hair"
						  shader    = "ShaderNodeBsdfHair"
						  node      = "Hair BSDF"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H19: material  = "Holdout"
						  shader    = "ShaderNodeHoldout"
						  node      = "Holdout"
						  ninput    = "Surface"
						  noutput   = "Holdout"
			   CASE &H1A: material  = "Mix"
						  shader    = "ShaderNodeMixShader"
						  node      = "Mix Shader"
						  ninput    = "Shader"
						  noutput   = "Shader"
			   CASE &H1B: material  = "Principled"
						  shader    = "ShaderNodeBsdfPrincipled"
						  node      = "Principled BSDF"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H1C: material  = "Refraction"
					      shader    = "ShaderNodeBsdfRefraction"
					      node      = "Refraction BSDF"
					      ninput    = "Surface"
			   CASE &H1D: material  = "Subsurface"
						  shader    = "ShaderNodeSubsurfaceScattering"
						  node      = "Subsurface Scattering"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H0E: material  = "Toon"
						  shader    = "ShaderNodeBsdfToon"
						  node      = "Toon BSDF"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H0F: material  = "Translucent"
						  shader    = "ShaderNodeBsdfTranslucent"
						  node      = "Translucent BSDF"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H20: material  = "Transparent"
						  shader    = "ShaderNodeBsdfTransparent"
						  node      = "Transparent BSDF"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H21: material  = "Velvet"
						  shader    = "ShaderNodeBsdfVelvet"
						  node      = "Velvet BSDF"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H22: material  = "Absorption"
						  shader    = "ShaderNodeVolumeAbsorption"
						  node      = "Volume Absorption"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H23: material  = "Scatter"
						  shader    = "ShaderNodeVolumeScatter"
						  node      = "Volume Scatter"
						  ninput    = "Surface"
						  noutput   = "BSDF"
			   CASE &H24: shader    = "ShaderNodeFresnel"
						  node      = "Fresnel"
			   CASE &H25: shader    = "ShaderNodeMapping"
						  node      = "Mapping"
			   CASE &H26: shader    = "ShaderNodeSeparateRGB"
						  node      = "Separate RGB"
			   CASE &H27: shader    = "ShaderNodeInvert"
						  node      = "Invert"
			   CASE &H28: shader    = "ShaderNodeValToRGB"
			   CASE &H29: shader    = "ShaderNodeGeometry"
			   CASE &H2A: shader    = "ShaderNodeLightPath"
			   CASE &H2B: shader    = "ShaderNodeGroup"
			   CASE &H2C: shader    = "ShaderNodeBlackbody"
						  node      = "Blackbody"
			   CASE &H2D: shader    = "ShaderNodeOutput"
			   CASE &H2E: shader    = "ShaderNodeCombineRGB"
						  node      = "Combine RGB"
			   CASE &H2F: shader    = "ShaderNodeVectorMath"
			   CASE &H30: shader    = "ShaderNodeRGB"
			   CASE &H31: shader    = "ShaderNodeTexMagic"
			   CASE &H32: shader    = "ShaderNodeParticleInfo"
			   CASE &H33: shader    = "ShaderNodeTexImage"
			   CASE &H34: shader    = "ShaderNodeLampData"
			   CASE &H35: shader    = "ShaderNodeOutputLamp"
			   CASE &H36: shader    = "ShaderNodeObjectInfo"
			   CASE &H37: shader    = "ShaderNodeVectorCurve"
			   CASE &H38: shader    = "ShaderNodeMaterial"
			   CASE &H39: shader    = "ShaderNodeSqueeze"
			   CASE &H3A: shader    = "ShaderNodeBrightContrast"
						  node      = "BrightContrast"
			   CASE &H3B: shader    = "ShaderNodeNormal"
			   CASE &H3C: shader    = "ShaderNodeMath"
			   CASE &H3D: shader    = "ShaderNodeScript"
			   CASE &H3E: shader    = "ShaderNodeGamma"
						  node      = "Gamma"
			   CASE &H3F: shader    = "ShaderNodeWavelength"
			   CASE &H40: shader    = "ShaderNodeUVAlongStroke"
			   CASE &H41: shader    = "ShaderNodeTexBrick"
			   CASE &H42: shader    = "ShaderNodeCameraData"
			   CASE &H43: shader    = "ShaderNodeCombineXYZ"
						  node      = "Combine XYZ"
			   CASE &H44: shader    = "ShaderNodeHairInfo"
						  node      = "Hair Info"
			   CASE &H45: shader    = "ShaderNodeHueSaturation"
						  node      = "Hue Saturation Value"
			   CASE &H46: shader    = "ShaderNodeSeparateXYZ"
						  node      = "Separate XYZ"
			   CASE &H47: shader    = "ShaderNodeTexMusgrave"
			   CASE &H48: shader    = "ShaderNodeTexEnvironment"
			   CASE &H49: shader    = "ShaderNodeSeparateHSV"
						  node      = "Separate HSV"
			   CASE &H4A: shader    = "ShaderNodeTexCoord"
			   CASE &H4B: shader    = "ShaderNodeTexGradient"
			   CASE &H4C: shader    = "ShaderNodeLayerWeight"
			   CASE &H4D: shader    = "ShaderNodeLightFalloff"
						  node      = "Light Falloff"
			   CASE &H4E: shader    = "ShaderNodeOutputWorld"
			   CASE &H4F: shader    = "ShaderNodeTangent"
			   CASE &H50: shader    = "ShaderNodeWireframe"
			   CASE &H51: shader    = "ShaderNodeVectorTransform"
						  node      = "Vector Transform"
			   CASE &H52: shader    = "ShaderNodeTexVoronoi"
			   CASE &H53: shader    = "ShaderNodeValue"
			   CASE &H54: shader    = "ShaderNodeNormalMap"
			   CASE &H55: shader    = "ShaderNodeUVMap"
			   CASE &H56: shader    = "ShaderNodeCombineHSV"
						  node      = "Combine HSV"
			   CASE &H57: shader    = "ShaderNodeMixRGB"
			   CASE &H58: shader    = "ShaderNodeRGBCurve"
			   CASE &H59: shader    = "ShaderNodeTexNoise"
			   CASE &H5A: shader    = "ShaderNodeOutputMaterial"
			   CASE &H5B: shader    = "ShaderNodeBump"
						  node      = "Bump"
			   CASE &H5C: shader    = "ShaderNodeExtendedMaterial"
			   CASE &H5D: shader    = "ShaderNodeRGBToBW"
						  node      = "RGBtoBW"
			   CASE &H5E: shader    = "ShaderNodeTexWave"
			   CASE &H5F: shader    = "ShaderNodeOutputLineStyle"
			   CASE &H60: shader    = "ShaderNodeTexSky"
			   CASE &H61: shader    = "ShaderNodeTexChecker"
			   CASE &H62: shader    = "ShaderNodeTexture"
			   CASE &H63: shader    = "ShaderNodeAttribute"
			   CASE &H64: shader    = "ShaderNodeNewGeometry"
			   CASE &H65: node      = "ColorRamp"
			   CASE &H66: node      = "Normal"
			   CASE &H67: node      = "Vector Curves"
			   CASE &H68: node      = "Mix"
			   CASE &H69: node      = "RGB Curves"
			   CASE &H6A: node      = "Brick Texture"
			   CASE &H6B: node      = "Checker Texture"
			   CASE &H6C: node      = "Environment Texture"
			   CASE &H6D: node      = "Gradient Texture"
			   CASE &H6E: node      = "Image Texture"
			   CASE &H6F: node      = "Magic Texture"
			   CASE &H70: node      = "Musgrave Texture"
			   CASE &H71: node      = "Noise Texture"
			   CASE &H72: node      = "Point Density"
			   CASE &H73: node      = "Sky Texture"
			   CASE &H74: node      = "Voronoi Texture"
			   CASE &H75: node      = "Wave Texture"
			   CASE &H76: node      = "Lamp Output"
			   CASE &H77: node      = "Materal Output"
			   CASE &H78: node      = "Attribute"
			   CASE &H79: node      = "Camera Data"
			   CASE &H7A: node      = "Geometry"
			   CASE &H7B: node      = "Layer Weight"
			   CASE &H7C: node      = "Light Path"
			   CASE &H7D: node      = "Object Info"
			   CASE &H7E: node      = "Particle Info"
			   CASE &H7F: node      = "RGB"
			   CASE &H80: node      = "Tangent"
			   CASE &H81: node      = "Texture Coordinate"
			   CASE &H82: node      = "UV Map"
			   CASE &H83: node      = "Value"
			   CASE &H84: node      = "Wireframe"
			   CASE &H85: ninput    = "Surface"
			   CASE &H86: ninput    = "Color"
			   CASE &H87: ninput    = "Roughness"
			   CASE &H88: ninput    = "Rotation"
			   CASE &H89: ninput    = "Normal"
			   CASE &H8A: ninput    = "Tangent"
			   CASE &H8B: ninput    = "Strength"
			   CASE &H8C: ninput    = "IOR"
			   CASE &H8D: ninput    = "Offset"
			   CASE &H8E: ninput    = "RoughtnessU"
			   CASE &H8F: ninput    = "RoughtnessV"
			   CASE &H90: ninput    = "Fac"
			   CASE &H91: ninput    = "BaseColor"
			   CASE &H92: ninput    = "Subsurface"
			   CASE &H93: ninput    = "Subsurface Radius"
			   CASE &H94: ninput    = "Subsurface Color"
			   CASE &H95: ninput    = "Specular"
			   CASE &H96: ninput    = "Specular Tint"
			   CASE &H97: ninput    = "Anistropic Rotation"
			   CASE &H98: ninput    = "Sheen"
			   CASE &H99: ninput    = "Sheen Tint"
			   CASE &H9A: ninput    = "Clearcoat"
			   CASE &H9B: ninput    = "Clearcoat Roughness"
			   CASE &H9C: ninput    = "Transmission"
			   CASE &H9D: ninput    = "Clearcoat Normal"
			   CASE &H9E: ninput    = "Scale"
			   CASE &H9F: ninput    = "Radius"
			   CASE &HA0: ninput    = "Texture Blur"
			   CASE &HA1: ninput    = "Size"
			   CASE &HA2: ninput    = "Smooth"
			   CASE &HA3: ninput    = "Sigma"
			   CASE &HA4: ninput    = "Density"
			   CASE &HA5: ninput    = "Anistropy"
			   CASE &HA6: lamp      = "POINT"
			   CASE &HA7: lamp      = "SUN"
			   CASE &HA8: lamp      = "SPOT"
			   CASE &HA9: lamp      = "HEMI"
			   CASE &HAA: lamp      = "AREA"
		END SELECT		
CASE &H0D 'Create new material/texture
        SELECT CASE mem64(sys_offset+&HC8)
	           CASE &H00
	            PRINT #1, "mat = bpy.data.materials.new('"+material+"')"
	            PRINT #1, "tex = bpy.data.textures.new('texture',"+textype+")"
	           CASE &H01 TO &H09
	            PRINT #1, "mat = bpy.data.materials.new('"+material+".00"+str(mem64(sys_offset+&HCB))+"')"
	            PRINT #1, "tex = bpy.data.textures.new('texture.00"+str(mem64(sys_offset+&HCB))+"',"+textype+")"
	           CASE &H0A TO &H63
	            PRINT #1, "mat = bpy.data.materials.new('"+material+".0"+str(mem64(sys_offset+&HCB))+"')"
	            PRINT #1, "tex = bpy.data.textures.new('texture.0"+str(mem64(sys_offset+&HCB))+"',"+textype+")"
	           CASE ELSE
	            PRINT #1, "mat = bpy.data.materials.new('"+material+"."+str(mem64(sys_offset+&HCB))+"')"
	            PRINT #1, "tex = bpy.data.textures.new('texture."+str(mem64(sys_offset+&HCB))+"',"+textype+")"     
        END SELECT
        PRINT #1, "mat.use_nodes = True"
        PRINT #1, "tex.use_nodes = True"        
        PRINT #1, "nt = mat.node_tree"
        PRINT #1, "nodes = nt.nodes"
        PRINT #1, "links = nt.links"
        SELECT CASE mem64(sys_offset+&HC8)
               CASE &H00
				PRINT #1, "bpy.context.object.data.uv_textures.new("+chr(34)+"UVMap"+chr(34)+")"
				PRINT #1, "bpy.context.object.data.uv_textures['UVMap'].active = True"
				PRINT #1, "bpy.ops.object.editmode_toggle()"
				PRINT #1, "bpy.ops.uv.smart_project()"
				PRINT #1, "bpy.ops.object.editmode_toggle()"
				PRINT #1, "uvmap   = nodes.new("+chr(34)+"ShaderNodeUVMap"+chr(34)+")"
                PRINT #1, "uvmap.uv_map = "+chr(34)+"UVMap"+chr(34)
               CASE &H01 TO &H09
				PRINT #1, "bpy.context.object.data.uv_textures.new("+chr(34)+"UVMap"+chr(34)+".00"+str(mem64(sys_offset+&HCB))+chr(34)+")"
				PRINT #1, "bpy.context.object.data.uv_textures['UVMap'].active = True"
				PRINT #1, "bpy.ops.object.editmode_toggle()"
				PRINT #1, "bpy.ops.uv.smart_project()"
				PRINT #1, "bpy.ops.object.editmode_toggle()"
				PRINT #1, "uvmap   = nodes.new("+chr(34)+"ShaderNodeUVMap"+chr(34)+")"               
                PRINT #1, "uvmap.uv_map = "+chr(34)+"UVMap"+chr(34)+".00"+str(mem64(sys_offset+&HCB))+chr(34)
               CASE &H0A TO &H63
				PRINT #1, "bpy.context.object.data.uv_textures.new("+chr(34)+"UVMap"+chr(34)+".0"+str(mem64(sys_offset+&HCB))+chr(34)+")"
				PRINT #1, "bpy.context.object.data.uv_textures['UVMap'].active = True"
				PRINT #1, "bpy.ops.object.editmode_toggle()"
				PRINT #1, "bpy.ops.uv.smart_project()"
				PRINT #1, "bpy.ops.object.editmode_toggle()" 
				PRINT #1, "uvmap   = nodes.new("+chr(34)+"ShaderNodeUVMap"+chr(34)+")"               
                PRINT #1, "uvmap.uv_map = "+chr(34)+"UVMap"+chr(34)+".0"+str(mem64(sys_offset+&HCB))+chr(34)
               CASE ELSE
				PRINT #1, "bpy.context.object.data.uv_textures.new("+chr(34)+"UVMap"+chr(34)+".00"+str(mem64(sys_offset+&HCB))+chr(34)+")"
				PRINT #1, "bpy.context.object.data.uv_textures['UVMap'].active = True"
				PRINT #1, "bpy.ops.object.editmode_toggle()"
				PRINT #1, "bpy.ops.uv.smart_project()"
				PRINT #1, "bpy.ops.object.editmode_toggle()" 
				PRINT #1, "uvmap   = nodes.new("+chr(34)+"ShaderNodeUVMap"+chr(34)+")"               
                PRINT #1, "uvmap.uv_map = "+chr(34)+"UVMap"+chr(34)+"."+str(mem64(sys_offset+&HCB))+chr(34)
        END SELECT                    
CASE &H0E 'Turn material/texture nodes on or off
	   SELECT CASE mem64(sys_offset+&HC8)
              CASE &H00: PRINT #1, "mat.use_nodes = True"
                         PRINT #1, "tex.use_nodes = True"
              CASE &H01: PRINT #1, "tex.use_nodes = False"
                         PRINT #1, "mat.use_nodes = False"               
	   END SELECT
CASE &H0F 'Load texture 
       SELECT CASE mem64(sys_offset+&HC8)
              CASE &H00: PRINT #1, "img.image = bpy.data.images.load("+chr(34)+"vram/HDRI/"+str(mem64(sys_offset+&HCB))+".png"+chr(34)+")"
              CASE &H01: PRINT #1, "img.image = bpy.data.images.load("+chr(34)+"vram/"+str(mem64(sys_offset+&HCB))+".bmp"+chr(34)+")"
       END SELECT       
CASE &H10 'Setup mew material/texture
       SELECT CASE mem64(sys_offset+&HC8)
              CASE &H00
	            PRINT #1, "slot = mat.texture_slots.add()"
                PRINT #1, "slot.texture = tex"
                PRINT #1, "inp = nodes.new("+chr(34)+shader+chr(34)+")"
                PRINT #1, "img  = nodes.new("+chr(34)+"ShaderNodeTexImage"+chr(34)+")"
                PRINT #1, "outp = nodes.new("+chr(34)+"ShaderNodeOutputMaterial"+chr(34)+")"
                PRINT #1, "links.new(outp.inputs['Surface'], inp.outputs['BSDF'])"
                PRINT #1, "links.new(inp.inputs['Color'],   img.outputs['Color'])"
                PRINT #1, "links.new(img.inputs['Vector'],    uvmap.outputs['UVMap'])"
              CASE &H01
               SELECT CASE mem64(sys_offset+&HCB)
	                   CASE &H00
	                     PRINT #1, "bpy.data.materials.new('"+material+"')"
	                     PRINT #1, "bpy.data.materials['"+material+"'].use_nodes = True"
	                     PRINT #1, "bpy.data.materials['"+material+"'].node_tree.nodes.new(type="+chr(34)+shader+chr(34)+")"
	                     PRINT #1, "inp = bpy.data.materials['"+material+"'].node_tree.nodes["+chr(34)+"Material Output"+chr(34)+"].inputs["+chr(34)+ninput+chr(34)+"]"
	                     PRINT #1, "outp = bpy.data.materials['"+material+"'].node_tree.nodes["+chr(34)+node+chr(34)+"].outputs["+chr(34)+noutput+chr(34)+"]"
	                     PRINT #1, "bpy.data.materials['"+material+"'].node_tree.links.new(outp, inp)"
	                     PRINT #1, "bpy.data.objects['"+shape+"'].active_material = bpy.data.materials['"+material+"']"
	                   CASE &H01 TO &H09
	                     PRINT #1, "bpy.data.materials.new('"+material+".00"+str(mem64(sys_offset+&HCB))+"')"
	                     PRINT #1, "bpy.data.materials['"+material+".00"+str(mem64(sys_offset+&HCB))+"'].use_nodes = True"
	                     PRINT #1, "bpy.data.materials['"+material+".00"+str(mem64(sys_offset+&HCB))+"'].node_tree.nodes.new(type="+chr(34)+shader+chr(34)+")"
	                     PRINT #1, "inp = bpy.data.materials['"+material+".00"+str(mem64(sys_offset+&HCB))+"'].node_tree.nodes["+chr(34)+"Material Output"+chr(34)+"].inputs["+chr(34)+ninput+chr(34)+"]"
	                     PRINT #1, "outp = bpy.data.materials['"+material+".00"+str(mem64(sys_offset+&HCB))+"'].node_tree.nodes["+chr(34)+node+chr(34)+"].outputs["+chr(34)+noutput+chr(34)+"]"
	                     PRINT #1, "bpy.data.materials['"+material+".00"+str(mem64(sys_offset+&HCB))+"'].node_tree.links.new(outp, inp)"
	                     PRINT #1, "bpy.data.objects['"+shape+".00"+str(mem64(sys_offset+&HCC))+"'].active_material = bpy.data.materials['"+material+".00"+str(mem64(sys_offset+&HCB))+"']"
	                   CASE &H0A TO &H63
	                     PRINT #1, "bpy.data.materials.new('"+material+".0"+str(mem64(sys_offset+&HCB))+"')"
	                     PRINT #1, "bpy.data.materials['"+material+".0"+str(mem64(sys_offset+&HCB))+"'].use_nodes = True"
	                     PRINT #1, "bpy.data.materials['"+material+".0"+str(mem64(sys_offset+&HCB))+"'].node_tree.nodes.new(type="+chr(34)+shader+chr(34)+")"
	                     PRINT #1, "inp = bpy.data.materials['"+material+".0"+str(mem64(sys_offset+&HCB))+"'].node_tree.nodes["+chr(34)+"Material Output"+chr(34)+"].inputs["+chr(34)+ninput+chr(34)+"]"
	                     PRINT #1, "outp = bpy.data.materials['"+material+".0"+str(mem64(sys_offset+&HCB))+"'].node_tree.nodes["+chr(34)+node+chr(34)+"].outputs["+chr(34)+noutput+chr(34)+"]"
	                     PRINT #1, "bpy.data.materials['"+material+".0"+str(mem64(sys_offset+&HCB))+"'].node_tree.links.new(outp, inp)"
	                     PRINT #1, "bpy.data.objects['"+shape+".0"+str(mem64(sys_offset+&HCC))+"'].active_material = bpy.data.materials['"+material+".0"+str(mem64(sys_offset+&HCB))+"']"
	                   CASE ELSE
	                     PRINT #1, "bpy.data.materials.new('"+material+"."+str(mem64(sys_offset+&HCB))+"')"
	                     PRINT #1, "bpy.data.materials['"+material+"."+str(mem64(sys_offset+&HCB))+"'].use_nodes = True"
	                     PRINT #1, "bpy.data.materials['"+material+"."+str(mem64(sys_offset+&HCB))+"'].node_tree.nodes.new(type="+chr(34)+shader+chr(34)+")"
	                     PRINT #1, "inp = bpy.data.materials['"+material+"."+str(mem64(sys_offset+&HCB))+"'].node_tree.nodes["+chr(34)+"Material Output"+chr(34)+"].inputs["+chr(34)+ninput+chr(34)+"]"
	                     PRINT #1, "outp = bpy.data.materials['"+material+"."+str(mem64(sys_offset+&HCB))+"'].node_tree.nodes["+chr(34)+node+chr(34)+"].outputs["+chr(34)+noutput+chr(34)+"]"
	                     PRINT #1, "bpy.data.materials['"+material+"."+str(mem64(sys_offset+&HCB))+"'].node_tree.links.new(outp, inp)"
	                     PRINT #1, "bpy.data.objects['"+shape+"."+str(mem64(sys_offset+&HCC))+"'].active_material = bpy.data.materials['"+material+"."+str(mem64(sys_offset+&HCB))+"']"
	           END SELECT 
       END SELECT                                      
CASE &H11 'Active material input
 select case mem64(sys_offset+&HC8)   
		case &H00 'Sets input 0
			print #1, tb+"'].node_tree.nodes["+chr(34)+node+_
					  chr(34)+"].inputs["+chr(34)+ninput+_
					  chr(34)+"].default_value = ("+str(mem64(sys_offset+&HCB))+_
					  "."+pad0+str(mem64(sys_offset+&HCE))+","+str(mem64(sys_offset+&HCD))+_
					  "."+pad1+str(mem64(sys_offset+&HD0))+","+str(mem64(sys_offset+&HD1))+"."+_
					  pad2+str(mem64(sys_offset+&HD2))+")"
		case &H01 'Sets input 1 and/or input 2
		    print #1, tb+"'].node_tree.nodes["+chr(34)+node+_
					  chr(34)+"].inputs["+chr(34)+ninput+_
					  chr(34)+"].default_value = "+str(mem64(sys_offset+&HCB))+_
					  "."+pad0+str(mem64(sys_offset+&HCE))
		case &H02 'Sets input 1 and/or input 2
			print #1, tb+"'].node_tree.nodes["+chr(34)+node+_
					  chr(34)+"].inputs["+chr(34)+ninput+_
					  chr(34)+"].default_value = ("+str(mem64(sys_offset+&HCB))+_
					  "."+pad0+str(mem64(sys_offset+&HCE))+","+str(mem64(sys_offset+&HCD))+_
					  "."+pad1+str(mem64(sys_offset+&HD0))+","+str(mem64(sys_offset+&HD1))+_
					  "."+pad2+str(mem64(sys_offset+&HD2))+","+str(mem64(sys_offset+&HD3))+_
					  "."+pad3+str(mem64(sys_offset+&HD4))+")"
 end select        
CASE &H12 'Set environment map
 select case mem64(sys_offset+&HC8)
        case &H00: print #1, tb+"bpy.context.scene.world.use_nodes = True"
        case &H01: print #1, tb+"bpy.context.scene.world.use_nodes = False"
        case &H02: 
            print #1, tb+"bpy.data.worlds[bpy.context.scene.world.name].node_tree"
            print #1, tb+"envNode = bpy.data.worlds[bpy.context.scene.world.name].node_tree.nodes.new(type="+chr(34)+"ShaderNodeTexEnvironment"+chr(34)+")"
            print #1, tb+"envNode.image=bpy.data.images.load("+chr(34)+"vram/HDRI/"+str(mem64(sys_offset+&HCB))+".png"+chr(34)+")"
            print #1, tb+"backNode = bpy.data.worlds[bpy.context.scene.world.name].node_tree.nodes['Background']"
            print #1, tb+"ColOut = envNode.outputs['Color']"
            print #1, tb+"ColIn = backNode.inputs['Color']"
            print #1, tb+"bpy.data.worlds[bpy.context.scene.world.name].node_tree.links.new(ColOut, ColIn)"
 end select   
CASE &H1B
	 select case mem64(sys_offset+&HC8)
	  case &H00
			print #1, tb+"bpy.data.materials['"+material;
	  case &H01 to &H09
			print #1, tb+"bpy.data.materials['"+material+".00"+str(mem64(sys_offset+&HCC));
	  case &H0A to &H63
			print #1, tb+"bpy.data.materials['"+material+".0"+str(mem64(sys_offset+&HCC));
	  case else
			print #1, tb+"bpy.data.materials['"+material+str(mem64(sys_offset+&HCC));
	 end select
