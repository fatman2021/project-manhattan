' memory registers
GLOBAL pc, adr0, adr1, adr3, pc_status TYPE NUMBER

' general purpose registers
GLOBAL shared as ulong r0, r1, r2, r3 TYPE NUMBER 

' video registers
RECORD Point3D
	LOCAL x_axis 
	LOCAL y_axis 
	LOCAL z_axis 
	LOCAL col    
	LOCAL grad   
	LOCAL xi     
END RECORD

RECORD Tri2D
	LOCAL p1
	LOCAL p2
	LOCAL p3
END RECORD

GLOBAL sin_table(356), cos_table(356) TYPE NUMBER
GLOBAL points(2577777) TYPE Point3D 
GLOBAL tris(2577777)   TYPE Tri2D
GLOBAL x_center, y_center, z_center, fov TYPE NUMBER
GLOBAL x_coord, y_coord, z_coord, tri_num TYPE NUMBER
GLOBAL px1, px2, px3, py1, py2, py3, pz1, pz2, pz3 TYPE NUMBER

GLOBAL screen_width, screen_height TYPE NUMBER
GLOBAL bits_per_pixel, bytes_per_pixel TYPE NUMBER
GLOBAL bytes_per_scanline, refresh_rate, radius TYPE NUMBER
GLOBAL red0=255,green0=255,blue0=255,xalpha0=255 TYPE NUMBER
GLOBAL red1=0,green1=0,blue1=0,xalpha1=0 TYPE NUMBER
GLOBAL red2=255,green2=255,blue2=255,xalpha2=255 TYPE NUMBER
GLOBAL x_axis0, y_axis0, z_axis0, col0, col1,char_h=160 TYPE NUMBER
GLOBAL x_axis1, y_axis1, z_axis1, char_ptr, char_w=160 TYPE NUMBER
GLOBAL char_buffer=16384, bitmask=255, pixel_size TYPE NUMBER

' string registers
GLOBAL string_adr, string_len TYPE NUMBER 
GLOBAL driver_name, string_data TYPE STRING

' mouse registers 
GLOBAL mouse_x, mouse_y, mouse_w, mouse_b, mouse_c, mouse_v TYPE NUMBER

' joystick registers
GLOBAL joystick_id, joystick_b TYPE NUMBER
GLOBAL a1,a2,a3,a4,a5,a6,a7,a8 TYPE NUMBER

' keyboard register
GLOBAL key TYPE NUMBER

' memory bank
GLOBAL ram   (0x10FFFFFF) TYPE NUMBER
GLOBAL xchar  (0x00007FF0) TYPE NUMBER ' Font

LABEL CHAR_ROM
DATA  60,102,110,110, 96, 98, 60,  0, 24, 60,102,126,102,102,102,  0
DATA 124,102,102,124,102,102,124,  0, 60,102, 96, 96, 96,102, 60,  0
DATA 120,108,102,102,102,108,120,  0,126, 96, 96,120, 96, 96,126,  0
DATA 126, 96, 96,120, 96, 96, 96,  0, 60,102, 96,110,102,102, 60,  0
DATA 102,102,102,126,102,102,102,  0, 60, 24, 24, 24, 24, 24, 60,  0
DATA  30, 12, 12, 12, 12,108, 56,  0,102,108,120,112,120,108,102,  0
DATA  96, 96, 96, 96, 96, 96,126,  0, 99,119,127,107, 99, 99, 99,  0
DATA 102,118,126,126,110,102,102,  0, 60,102,102,102,102,102, 60,  0
DATA 124,102,102,124, 96, 96, 96,  0, 60,102,102,102,102, 60, 14,  0
DATA 124,102,102,124,120,108,102,  0, 60,102, 96, 60,  6,102, 60,  0
DATA 126, 24, 24, 24, 24, 24, 24,  0,102,102,102,102,102,102, 60,  0
DATA 102,102,102,102,102, 60, 24,  0, 99, 99, 99,107,127,119, 99,  0
DATA 102,102, 60, 24, 60,102,102,  0,102,102,102, 60, 24, 24, 24,  0
DATA 126,  6, 12, 24, 48, 96,126,  0, 60, 48, 48, 48, 48, 48, 60,  0
DATA  12, 18, 48,124, 48, 98,252,  0, 60, 12, 12, 12, 12, 12, 60,  0
DATA   0, 24, 60,126, 24, 24, 24, 24,  0, 16, 48,127,127, 48, 16,  0
DATA   0,  0,  0,  0,  0,  0,  0,  0, 24, 24, 24, 24,  0,  0, 24,  0
DATA 102,102,102,  0,  0,  0,  0,  0,102,102,255,102,255,102,102,  0
DATA  24, 62, 96, 60,  6,124, 24,  0, 98,102, 12, 24, 48,102, 70,  0
DATA  60,102, 60, 56,103,102, 63,  0,  6, 12, 24,  0,  0,  0,  0,  0
DATA  12, 24, 48, 48, 48, 24, 12,  0, 48, 24, 12, 12, 12, 24, 48,  0
DATA   0,102, 60,255, 60,102,  0,  0,  0, 24, 24,126, 24, 24,  0,  0
DATA   0,  0,  0,  0,  0, 24, 24, 48,  0,  0,  0,126,  0,  0,  0,  0
DATA   0,  0,  0,  0,  0, 24, 24,  0,  0,  3,  6, 12, 24, 48, 96,  0
DATA  60,102,110,118,102,102, 60,  0, 24, 24, 56, 24, 24, 24,126,  0
DATA  60,102,  6, 12, 48, 96,126,  0, 60,102,  6, 28,  6,102, 60,  0
DATA   6, 14, 30,102,127,  6,  6,  0,126, 96,124,  6,  6,102, 60,  0
DATA  60,102, 96,124,102,102, 60,  0,126,102, 12, 24, 24, 24, 24,  0
DATA  60,102,102, 60,102,102, 60,  0, 60,102,102, 62,  6,102, 60,  0
DATA   0,  0, 24,  0,  0, 24,  0,  0,  0,  0, 24,  0,  0, 24, 24, 48
DATA  14, 24, 48, 96, 48, 24, 14,  0,  0,  0,126,  0,126,  0,  0,  0
DATA 112, 24, 12,  6, 12, 24,112,  0, 60,102,  6, 12, 24,  0, 24,  0
DATA   0,  0,  0,255,255,  0,  0,  0,  8, 28, 62,127,127, 28, 62,  0
DATA  24, 24, 24, 24, 24, 24, 24, 24,  0,  0,  0,255,255,  0,  0,  0
DATA   0,  0,255,255,  0,  0,  0,  0,  0,255,255,  0,  0,  0,  0,  0
DATA   0,  0,  0,  0,255,255,  0,  0, 48, 48, 48, 48, 48, 48, 48, 48
DATA  12, 12, 12, 12, 12, 12, 12, 12,  0,  0,  0,224,240, 56, 24, 24
DATA  24, 24, 28, 15,  7,  0,  0,  0, 24, 24, 56,240,224,  0,  0,  0
DATA 192,192,192,192,192,192,255,255,192,224,112, 56, 28, 14,  7,  3
DATA   3,  7, 14, 28, 56,112,224,192,255,255,192,192,192,192,192,192
DATA 255,255,  3,  3,  3,  3,  3,  3,  0, 60,126,126,126,126, 60,  0
DATA   0,  0,  0,  0,  0,255,255,  0, 54,127,127,127, 62, 28,  8,  0
DATA  96, 96, 96, 96, 96, 96, 96, 96,  0,  0,  0,  7, 15, 28, 24, 24
DATA 195,231,126, 60, 60,126,231,195,  0, 60,126,102,102,126, 60,  0
DATA  24, 24,102,102, 24, 24, 60,  0,  6,  6,  6,  6,  6,  6,  6,  6
DATA   8, 28, 62,127, 62, 28,  8,  0, 24, 24, 24,255,255, 24, 24, 24
DATA 192,192, 48, 48,192,192, 48, 48, 24, 24, 24, 24, 24, 24, 24, 24
DATA   0,  0,  3, 62,118, 54, 54,  0,255,127, 63, 31, 15,  7,  3,  1
DATA   0,  0,  0,  0,  0,  0,  0,  0,240,240,240,240,240,240,240,240
DATA   0,  0,  0,  0,255,255,255,255,255,  0,  0,  0,  0,  0,  0,  0
DATA   0,  0,  0,  0,  0,  0,  0,255,192,192,192,192,192,192,192,192
DATA 204,204, 51, 51,204,204, 51, 51,  3,  3,  3,  3,  3,  3,  3,  3
DATA   0,  0,  0,  0,204,204, 51, 51,255,254,252,248,240,224,192,128
DATA   3,  3,  3,  3,  3,  3,  3,  3, 24, 24, 24, 31, 31, 24, 24, 24
DATA   0,  0,  0,  0, 15, 15, 15, 15, 24, 24, 24, 31, 31,  0,  0,  0
DATA   0,  0,  0,248,248, 24, 24, 24,  0,  0,  0,  0,  0,  0,255,255
DATA   0,  0,  0, 31, 31, 24, 24, 24, 24, 24, 24,255,255,  0,  0,  0
DATA   0,  0,  0,255,255, 24, 24, 24, 24, 24, 24,248,248, 24, 24, 24
DATA 192,192,192,192,192,192,192,192,224,224,224,224,224,224,224,224
DATA   7,  7,  7,  7,  7,  7,  7,  7,255,255,  0,  0,  0,  0,  0,  0
DATA 255,255,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,255,255
DATA   3,  3,  3,  3,  3,  3,255,255,  0,  0,  0,  0,240,240,240,240
DATA  15, 15, 15, 15,  0,  0,  0,  0, 24, 24, 24,248,248,  0,  0,  0
DATA 240,240,240,240,  0,  0,  0,  0,240,240,240,240, 15, 15, 15, 15
DATA 195,153,145,145,159,153,195,255,231,195,153,129,153,153,153,255
DATA 131,153,153,131,153,153,131,255,195,153,159,159,159,153,195,255
DATA 135,147,153,153,153,147,135,255,129,159,159,135,159,159,129,255
DATA 129,159,159,135,159,159,159,255,195,153,159,145,153,153,195,255
DATA 153,153,153,129,153,153,153,255,195,231,231,231,231,231,195,255
DATA 225,243,243,243,243,147,199,255,153,147,135,143,135,147,153,255
DATA 159,159,159,159,159,159,129,255,156,136,128,148,156,156,156,255
DATA 153,137,129,129,145,153,153,255,195,153,153,153,153,153,195,255
DATA 131,153,153,131,159,159,159,255,195,153,153,153,153,195,241,255
DATA 131,153,153,131,135,147,153,255,195,153,159,195,249,153,195,255
DATA 129,231,231,231,231,231,231,255,153,153,153,153,153,153,195,255
DATA 153,153,153,153,153,195,231,255,156,156,156,148,128,136,156,255
DATA 153,153,195,231,195,153,153,255,153,153,153,195,231,231,231,255
DATA 129,249,243,231,207,159,129,255,195,207,207,207,207,207,195,255
DATA 243,237,207,131,207,157,  3,255,195,243,243,243,243,243,195,255
DATA 255,231,195,129,231,231,231,231,255,239,207,128,128,207,239,255
DATA 255,255,255,255,255,255,255,255,231,231,231,231,255,255,231,255
DATA 153,153,153,255,255,255,255,255,153,153,  0,153,  0,153,153,255
DATA 231,193,159,195,249,131,231,255,157,153,243,231,207,153,185,255
DATA 195,153,195,199,152,153,192,255,249,243,231,255,255,255,255,255
DATA 243,231,207,207,207,231,243,255,207,231,243,243,243,231,207,255
DATA 255,153,195,  0,195,153,255,255,255,231,231,129,231,231,255,255
DATA 255,255,255,255,255,231,231,207,255,255,255,129,255,255,255,255
DATA 255,255,255,255,255,231,231,255,255,252,249,243,231,207,159,255
DATA 195,153,145,137,153,153,195,255,231,231,199,231,231,231,129,255
DATA 195,153,249,243,207,159,129,255,195,153,249,227,249,153,195,255
DATA 249,241,225,153,128,249,249,255,129,159,131,249,249,153,195,255
DATA 195,153,159,131,153,153,195,255,129,153,243,231,231,231,231,255
DATA 195,153,153,195,153,153,195,255,195,153,153,193,249,153,195,255
DATA 255,255,231,255,255,231,255,255,255,255,231,255,255,231,231,207
DATA 241,231,207,159,207,231,241,255,255,255,129,255,129,255,255,255
DATA 143,231,243,249,243,231,143,255,195,153,249,243,231,255,231,255
DATA 255,255,255,  0,  0,255,255,255,247,227,193,128,128,227,193,255
DATA 231,231,231,231,231,231,231,231,255,255,255,  0,  0,255,255,255
DATA 255,255,  0,  0,255,255,255,255,255,  0,  0,255,255,255,255,255
DATA 255,255,255,255,  0,  0,255,255,207,207,207,207,207,207,207,207
DATA 243,243,243,243,243,243,243,243,255,255,255, 31, 15,199,231,231
DATA 231,231,227,240,248,255,255,255,231,231,199, 15, 31,255,255,255
DATA  63, 63, 63, 63, 63, 63,  0,  0, 63, 31,143,199,227,241,248,252
DATA 252,248,241,227,199,143, 31, 63,  0,  0, 63, 63, 63, 63, 63, 63
DATA   0,  0,252,252,252,252,252,252,255,195,129,129,129,129,195,255
DATA 255,255,255,255,255,  0,  0,255,201,128,128,128,193,227,247,255
DATA 159,159,159,159,159,159,159,159,255,255,255,248,240,227,231,231
DATA  60, 24,129,195,195,129, 24, 60,255,195,129,153,153,129,195,255
DATA 231,231,153,153,231,231,195,255,249,249,249,249,249,249,249,249
DATA 247,227,193,128,193,227,247,255,231,231,231,  0,  0,231,231,231
DATA  63, 63,207,207, 63, 63,207,207,231,231,231,231,231,231,231,231
DATA 255,255,252,193,137,201,201,255,  0,128,192,224,240,248,252,254
DATA 255,255,255,255,255,255,255,255, 15, 15, 15, 15, 15, 15, 15, 15
DATA 255,255,255,255,  0,  0,  0,  0,  0,255,255,255,255,255,255,255
DATA 255,255,255,255,255,255,255,  0, 63, 63, 63, 63, 63, 63, 63, 63
DATA  51, 51,204,204, 51, 51,204,204,252,252,252,252,252,252,252,252
DATA 255,255,255,255, 51, 51,204,204,  0,  1,  3,  7, 15, 31, 63,127
DATA 252,252,252,252,252,252,252,252,231,231,231,224,224,231,231,231
DATA 255,255,255,255,240,240,240,240,231,231,231,224,224,255,255,255
DATA 255,255,255,  7,  7,231,231,231,255,255,255,255,255,255,  0,  0
DATA 255,255,255,224,224,231,231,231,231,231,231,  0,  0,255,255,255
DATA 255,255,255,  0,  0,231,231,231,231,231,231,  7,  7,231,231,231
DATA  63, 63, 63, 63, 63, 63, 63, 63, 31, 31, 31, 31, 31, 31, 31, 31
DATA 248,248,248,248,248,248,248,248,  0,  0,255,255,255,255,255,255
DATA   0,  0,  0,255,255,255,255,255,255,255,255,255,255,  0,  0,  0
DATA 252,252,252,252,252,252,  0,  0,255,255,255,255, 15, 15, 15, 15
DATA 240,240,240,240,255,255,255,255,231,231,231,  7,  7,255,255,255
DATA  15, 15, 15, 15,255,255,255,255, 15, 15, 15, 15,240,240,240,240
DATA  60,102,110,110, 96, 98, 60,  0,  0,  0, 60,  6, 62,102, 62,  0
DATA   0, 96, 96,124,102,102,124,  0,  0,  0, 60, 96, 96, 96, 60,  0
DATA   0,  6,  6, 62,102,102, 62,  0,  0,  0, 60,102,126, 96, 60,  0
DATA   0, 14, 24, 62, 24, 24, 24,  0,  0,  0, 62,102,102, 62,  6,124
DATA   0, 96, 96,124,102,102,102,  0,  0, 24,  0, 56, 24, 24, 60,  0
DATA   0,  6,  0,  6,  6,  6,  6, 60,  0, 96, 96,108,120,108,102,  0
DATA   0, 56, 24, 24, 24, 24, 60,  0,  0,  0,102,127,127,107, 99,  0
DATA   0,  0,124,102,102,102,102,  0,  0,  0, 60,102,102,102, 60,  0
DATA   0,  0,124,102,102,124, 96, 96,  0,  0, 62,102,102, 62,  6,  6
DATA   0,  0,124,102, 96, 96, 96,  0,  0,  0, 62, 96, 60,  6,124,  0
DATA   0, 24,126, 24, 24, 24, 14,  0,  0,  0,102,102,102,102, 62,  0
DATA   0,  0,102,102,102, 60, 24,  0,  0,  0, 99,107,127, 62, 54,  0
DATA   0,  0,102, 60, 24, 60,102,  0,  0,  0,102,102,102, 62, 12,120
DATA   0,  0,126, 12, 24, 48,126,  0, 60, 48, 48, 48, 48, 48, 60,  0
DATA  12, 18, 48,124, 48, 98,252,  0, 60, 12, 12, 12, 12, 12, 60,  0
DATA   0, 24, 60,126, 24, 24, 24, 24,  0, 16, 48,127,127, 48, 16,  0
DATA   0,  0,  0,  0,  0,  0,  0,  0, 24, 24, 24, 24,  0,  0, 24,  0
DATA 102,102,102,  0,  0,  0,  0,  0,102,102,255,102,255,102,102,  0
DATA  24, 62, 96, 60,  6,124, 24,  0, 98,102, 12, 24, 48,102, 70,  0
DATA  60,102, 60, 56,103,102, 63,  0,  6, 12, 24,  0,  0,  0,  0,  0
DATA  12, 24, 48, 48, 48, 24, 12,  0, 48, 24, 12, 12, 12, 24, 48,  0
DATA   0,102, 60,255, 60,102,  0,  0,  0, 24, 24,126, 24, 24,  0,  0
DATA   0,  0,  0,  0,  0, 24, 24, 48,  0,  0,  0,126,  0,  0,  0,  0
DATA   0,  0,  0,  0,  0, 24, 24,  0,  0,  3,  6, 12, 24, 48, 96,  0
DATA  60,102,110,118,102,102, 60,  0, 24, 24, 56, 24, 24, 24,126,  0
DATA  60,102,  6, 12, 48, 96,126,  0, 60,102,  6, 28,  6,102, 60,  0
DATA   6, 14, 30,102,127,  6,  6,  0,126, 96,124,  6,  6,102, 60,  0
DATA  60,102, 96,124,102,102, 60,  0,126,102, 12, 24, 24, 24, 24,  0
DATA  60,102,102, 60,102,102, 60,  0, 60,102,102, 62,  6,102, 60,  0
DATA   0,  0, 24,  0,  0, 24,  0,  0,  0,  0, 24,  0,  0, 24, 24, 48
DATA  14, 24, 48, 96, 48, 24, 14,  0,  0,  0,126,  0,126,  0,  0,  0
DATA 112, 24, 12,  6, 12, 24,112,  0, 60,102,  6, 12, 24,  0, 24,  0
DATA   0,  0,  0,255,255,  0,  0,  0, 24, 60,102,126,102,102,102,  0
DATA 124,102,102,124,102,102,124,  0, 60,102, 96, 96, 96,102, 60,  0
DATA 120,108,102,102,102,108,120,  0,126, 96, 96,120, 96, 96,126,  0
DATA 126, 96, 96,120, 96, 96, 96,  0, 60,102, 96,110,102,102, 60,  0
DATA 102,102,102,126,102,102,102,  0, 60, 24, 24, 24, 24, 24, 60,  0
DATA  30, 12, 12, 12, 12,108, 56,  0,102,108,120,112,120,108,102,  0
DATA  96, 96, 96, 96, 96, 96,126,  0, 99,119,127,107, 99, 99, 99,  0
DATA 102,118,126,126,110,102,102,  0, 60,102,102,102,102,102, 60,  0
DATA 124,102,102,124, 96, 96, 96,  0, 60,102,102,102,102, 60, 14,  0
DATA 124,102,102,124,120,108,102,  0, 60,102, 96, 60,  6,102, 60,  0
DATA 126, 24, 24, 24, 24, 24, 24,  0,102,102,102,102,102,102, 60,  0
DATA 102,102,102,102,102, 60, 24,  0, 99, 99, 99,107,127,119, 99,  0
DATA 102,102, 60, 24, 60,102,102,  0,102,102,102, 60, 24, 24, 24,  0
DATA 126,  6, 12, 24, 48, 96,126,  0, 24, 24, 24,255,255, 24, 24, 24
DATA 192,192, 48, 48,192,192, 48, 48, 24, 24, 24, 24, 24, 24, 24, 24
DATA  51, 51,204,204, 51, 51,204,204, 51,153,204,102, 51,153,204,102
DATA   0,  0,  0,  0,  0,  0,  0,  0,240,240,240,240,240,240,240,240
DATA   0,  0,  0,  0,255,255,255,255,255,  0,  0,  0,  0,  0,  0,  0
DATA   0,  0,  0,  0,  0,  0,  0,255,192,192,192,192,192,192,192,192
DATA 204,204, 51, 51,204,204, 51, 51,  3,  3,  3,  3,  3,  3,  3,  3
DATA   0,  0,  0,  0,204,204, 51, 51,204,153, 51,102,204,153, 51,102
DATA   3,  3,  3,  3,  3,  3,  3,  3, 24, 24, 24, 31, 31, 24, 24, 24
DATA   0,  0,  0,  0, 15, 15, 15, 15, 24, 24, 24, 31, 31,  0,  0,  0
DATA   0,  0,  0,248,248, 24, 24, 24,  0,  0,  0,  0,  0,  0,255,255
DATA   0,  0,  0, 31, 31, 24, 24, 24, 24, 24, 24,255,255,  0,  0,  0
DATA   0,  0,  0,255,255, 24, 24, 24, 24, 24, 24,248,248, 24, 24, 24
DATA 192,192,192,192,192,192,192,192,224,224,224,224,224,224,224,224
DATA   7,  7,  7,  7,  7,  7,  7,  7,255,255,  0,  0,  0,  0,  0,  0
DATA 255,255,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,255,255
DATA   1,  3,  6,108,120,112, 96,  0,  0,  0,  0,  0,240,240,240,240
DATA  15, 15, 15, 15,  0,  0,  0,  0, 24, 24, 24,248,248,  0,  0,  0
DATA 240,240,240,240,  0,  0,  0,  0,240,240,240,240, 15, 15, 15, 15
DATA 195,153,145,145,159,153,195,255,255,255,195,249,193,153,193,255
DATA 255,159,159,131,153,153,131,255,255,255,195,159,159,159,195,255
DATA 255,249,249,193,153,153,193,255,255,255,195,153,129,159,195,255
DATA 255,241,231,193,231,231,231,255,255,255,193,153,153,193,249,131
DATA 255,159,159,131,153,153,153,255,255,231,255,199,231,231,195,255
DATA 255,249,255,249,249,249,249,195,255,159,159,147,135,147,153,255
DATA 255,199,231,231,231,231,195,255,255,255,153,128,128,148,156,255
DATA 255,255,131,153,153,153,153,255,255,255,195,153,153,153,195,255
DATA 255,255,131,153,153,131,159,159,255,255,193,153,153,193,249,249
DATA 255,255,131,153,159,159,159,255,255,255,193,159,195,249,131,255
DATA 255,231,129,231,231,231,241,255,255,255,153,153,153,153,193,255
DATA 255,255,153,153,153,195,231,255,255,255,156,148,128,193,201,255
DATA 255,255,153,195,231,195,153,255,255,255,153,153,153,193,243,135
DATA 255,255,129,243,231,207,129,255,195,207,207,207,207,207,195,255
DATA 243,237,207,131,207,157,  3,255,195,243,243,243,243,243,195,255
DATA 255,231,195,129,231,231,231,231,255,239,207,128,128,207,239,255
DATA 255,255,255,255,255,255,255,255,231,231,231,231,255,255,231,255
DATA 153,153,153,255,255,255,255,255,153,153,  0,153,  0,153,153,255
DATA 231,193,159,195,249,131,231,255,157,153,243,231,207,153,185,255
DATA 195,153,195,199,152,153,192,255,249,243,231,255,255,255,255,255
DATA 243,231,207,207,207,231,243,255,207,231,243,243,243,231,207,255
DATA 255,153,195,  0,195,153,255,255,255,231,231,129,231,231,255,255
DATA 255,255,255,255,255,231,231,207,255,255,255,129,255,255,255,255
DATA 255,255,255,255,255,231,231,255,255,252,249,243,231,207,159,255
DATA 195,153,145,137,153,153,195,255,231,231,199,231,231,231,129,255
DATA 195,153,249,243,207,159,129,255,195,153,249,227,249,153,195,255
DATA 249,241,225,153,128,249,249,255,129,159,131,249,249,153,195,255
DATA 195,153,159,131,153,153,195,255,129,153,243,231,231,231,231,255
DATA 195,153,153,195,153,153,195,255,195,153,153,193,249,153,195,255
DATA 255,255,231,255,255,231,255,255,255,255,231,255,255,231,231,207
DATA 241,231,207,159,207,231,241,255,255,255,129,255,129,255,255,255
DATA 143,231,243,249,243,231,143,255,195,153,249,243,231,255,231,255
DATA 255,255,255,  0,  0,255,255,255,231,195,153,129,153,153,153,255
DATA 131,153,153,131,153,153,131,255,195,153,159,159,159,153,195,255
DATA 135,147,153,153,153,147,135,255,129,159,159,135,159,159,129,255
DATA 129,159,159,135,159,159,159,255,195,153,159,145,153,153,195,255
DATA 153,153,153,129,153,153,153,255,195,231,231,231,231,231,195,255
DATA 225,243,243,243,243,147,199,255,153,147,135,143,135,147,153,255
DATA 159,159,159,159,159,159,129,255,156,136,128,148,156,156,156,255
DATA 153,137,129,129,145,153,153,255,195,153,153,153,153,153,195,255
DATA 131,153,153,131,159,159,159,255,195,153,153,153,153,195,241,255
DATA 131,153,153,131,135,147,153,255,195,153,159,195,249,153,195,255
DATA 129,231,231,231,231,231,231,255,153,153,153,153,153,153,195,255
DATA 153,153,153,153,153,195,231,255,156,156,156,148,128,136,156,255
DATA 153,153,195,231,195,153,153,255,153,153,153,195,231,231,231,255
DATA 129,249,243,231,207,159,129,255,231,231,231,  0, 0, 231,231,231
DATA  63, 63,207,207, 63, 63,207,207,231,231,231,231,231,231,231,231
DATA 204,204, 51, 51,204,204,51,  51,204,102, 51,153,204,102, 51,153
DATA 255,255,255,255,255,255,255,255, 15, 15, 15, 15, 15, 15, 15, 15
DATA 255,255,255,255,  0,  0,  0,  0,  0,255,255,255,255,255,255,255
DATA 255,255,255,255,255,255,255,  0, 63, 63, 63, 63, 63, 63, 63, 63
DATA  51, 51,204,204, 51, 51,204,204,252,252,252,252,252,252,252,252
DATA 255,255,255,255, 51, 51,204,204, 51,102,204,153, 51,102,204,153
DATA 252,252,252,252,252,252,252,252,231,231,231,224,224,231,231,231
DATA 255,255,255,255,240,240,240,240,231,231,231,224,224,255,255,255
DATA 255,255,255,  7,  7,231,231,231,255,255,255,255,255,255,  0,  0
DATA 255,255,255,224,224,231,231,231,231,231,231,  0,  0,255,255,255
DATA 255,255,255,  0,  0,231,231,231,231,231,231,  7,  7,231,231,231
DATA  63, 63, 63, 63, 63, 63, 63, 63, 31, 31, 31, 31, 31, 31, 31, 31
DATA 248,248,248,248,248,248,248,248,  0,  0,255,255,255,255,255,255
DATA   0,  0,  0,255,255,255,255,255,255,255,255,255,255,  0,  0,  0
DATA 254,252,249,147,135,143,159,255,255,255,255,255, 15, 15, 15, 15
DATA 240,240,240,240,255,255,255,255,231,231,231,  7,  7,255,255,255
DATA  15, 15, 15, 15, 255,255,255,255,15, 15, 15, 15,240,240,240,240


'Load roms 
RESTORE CHAR_ROM
FOR char_ptr=0 TO 16383
 READ xchar(char_ptr)
 r0 = r0 + 1: IF r0>2047 THEN
 r0 = 0: RESTORE CHAR_ROM
ENDIF  
NEXT
CALL pokeb(0,255): CALL pokeb(1,255)

FUNCTION peekb(adr TYPE NUMBER) TYPE NUMBER
  LOCAL I=ram[adr]
  RETURN I
ENDFUNCTION

SUB pokeb(adr as uinteger TYPE NUMBER,v TYPE NUMBER)
  ram(adr)=v
  SELECT adr
   CASE 0x000000001: r0 = v           ' move r0, v
   CASE 0x000000002: r1 = v           ' move r1, v  
   CASE 0x000000003: r2 = v           ' move r2, v 
   CASE 0x000000004: r0 = r1          ' move r0, r1
   CASE 0x000000005: r0 = r2          ' move r0, r2
   CASE 0x000000006: r1 = r0          ' move r1, r0
   CASE 0x000000007: r1 = r2          ' move r1, r2
   CASE 0x000000008: r2 = r0          ' move r2, r0
   CASE 0x000000009: r2 = r1          ' move r2, r1
   CASE 0x00000000A: pc = r0          ' move pc, r0
   CASE 0x00000000B: pc = r1          ' move pc, r1
   CASE 0x00000000C: pc = r2          ' move pc, r2
   CASE 0x00000000E: adr0 = r0        ' move adr0, r0
   CASE 0x00000000F: adr0 = r1        ' move adr0, r1
   CASE 0x000000010: adr0 = r2        ' move adr0, r2
   CASE 0x000000011: adr1 = r0        ' move adr1, r0
   CASE 0x000000012: adr1 = r1        ' move adr1, r1
   CASE 0x000000013: adr1 = r2        ' move adr1, r2  
   CASE 0x000000014: adr3 = r0        ' move adr3, r0
   CASE 0x000000015: adr3 = r1        ' move adr3, r1
   CASE 0x000000016: adr3 = r2        ' move adr3, r2
   CASE 0x000000017: red0 = r0        ' move red0, r0
   CASE 0x000000018: red1 = r0        ' move red0, r0
   CASE 0x000000019: red2 = r0        ' move red2, r0 
   CASE 0x00000001A: green0 = r0      ' move green0, r0
   CASE 0x00000001B: green1 = r0      ' move green1, r0
   CASE 0x00000001C: green2 = r0      ' move green2, r0
   CASE 0x00000001D: blue0 = r0       ' move blue0, r0
   CASE 0x00000001E: blue1 = r0       ' move blue1, r0
   CASE 0x00000001F: blue2 = r0       ' move blue2, r0
   CASE 0x00000001D: xalpha0 = r0     ' move xalpha0, r0
   CASE 0x00000001E: xalpha1 = r0     ' move xalpha1, r0
   CASE 0x00000001F: xalpha2 = r0     ' move xalpha2, r0   
   CASE 0x000000020: x_axis0 = r0     ' move x_axis0, r0
   CASE 0x000000021: x_axis1 = r0     ' move x_axis1, r0
   CASE 0x000000022: y_axis0 = r0     ' move y_axis0, r0
   CASE 0x000000023: y_axis1 = r0     ' move y_axis1, r0
   CASE 0x000000024: z_axis0 = r0     ' move z_axis0, r0
   CASE 0x000000025: z_axis1 = r0     ' move z_axis1, r0
   CASE 0x000000026: col0 = r0        ' move col1, r0
   CASE 0x000000027: col1 = r0        ' move col2, r0
   CASE 0x000000028: char_h = r0      ' move char_h, r0
   CASE 0x000000029: char_w = r0      ' move char_w, r0
   CASE 0x00000002A: char_ptr = r0    ' move char_ptr, r0
   CASE 0x00000002B: char_buffer = r0 ' move char_buffer, r0
   CASE 0x00000002C: bitmask = r0     ' move bitmask, r0
   CASE 0x00000002D: pixel_size = r0  ' move pixel_size, r0
   CASE 0x00000002E: radius = r0      ' move radius, r0
   CASE 0x00000002F: string_adr = r0  ' move string_adr, r0
   CASE 0x000000030: string_len = r0  ' move string_len, r0
   CASE 0x000000031: r0 = mouse_x     ' move r0, mouse_X
   CASE 0x000000032: mouse_x = r0     ' move mouse_x, r0
   CASE 0x000000033: r0 = mouse_y     ' move r0, mouse_y
   CASE 0x000000034: mouse_y = r0     ' move mouse_y, r0
   CASE 0x000000035: r0 = mouse_w     ' move r0, mouse_w
   CASE 0x000000036: r0 = mouse_b     ' move r0, mouse_b
   CASE 0x000000037: r0 = mouse_c     ' move r0, mouse_c
   CASE 0x000000038: r0 = mouse_v     ' move r0, mouse_v
   CASE 0x000000039: mouse_v = r0     ' move mouse_v, r0
   CASE 0x00000003A: r0 = joystick_id ' move r0, joystick_id
   CASE 0x00000003B: r0 = joystick_b  ' move r0, joystick_b
   CASE 0x00000003C: r0 = a1          ' move r0, a1
   CASE 0x00000003D: r0 = a2          ' move r0, a2
   CASE 0x00000003F: r0 = a3          ' move r0, a3
   CASE 0x000000040: r0 = a4          ' move r0, a4
   CASE 0x000000041: r0 = a5          ' move r0, a5
   CASE 0x000000042: r0 = a6          ' move r0, a6
   CASE 0x000000043: r0 = a7          ' move r0, a7
   CASE 0x000000044: r0 = a8          ' move r0, a8   
   CASE 0x000000045: r0 = key         ' move r0, key 
   CASE 0x000000046: r0 = r1 + r2     ' add r1, r2
   CASE 0x000000047: r0 = r1 - r2     ' sub r1, r2
   CASE 0x000000048: r0 = r1 * r2     ' mul r1, r2
   CASE 0x000000049: r0 = r1 / r2     ' div r1, r3
   CASE 0x00000004A: r0 = r1 \ r2     ' idiv r1, r2
   CASE 0x00000004B: r0 = r1 ^ r2     ' exp r1, r2
   CASE 0x00000004C: r0 = r1 mod r2   ' mod r0, r1
   CASE 0x00000004D: r0 = - r0        ' neg r0
   CASE 0x00000004E: r0 = r1 << r2   ' << r1, r2
   CASE 0x00000004F: r0 = r1 shr r2   ' shr r1, r2
   CASE 0x000000050: r0 = (r1 = r2)   ' equ r1, r2
   CASE 0x000000051: r0 = (r1 <> r2)  ' ne  r1, r2
   CASE 0x000000052: r0 = (r1 < r2)   ' lt  r1, r2
   CASE 0x000000053: r0 = (r1 <= r2)  ' lte r1, r2
   CASE 0x000000054: r0 = (r1 >= r2)  ' gle r1, r2
   CASE 0x000000055: r0 = (r1 > r2)   ' gt  r1, r2 
   CASE 0x000000056: r0 = (r1 and r2) ' and r1, r2
   CASE 0x000000057: r0 = (r1 eqv r2) ' eqv r1, r2
   CASE 0x000000058: r0 = (r1 imp r2) ' imp r1, r2
   CASE 0x000000059: r0 = (r1 or r2)  ' or  r1, r2
   CASE 0x00000005A: r0 = (r1 xor r2) ' xor r1, r2
   CASE 0x00000005B: string_adr = r0  ' move string_adr, r0
   CASE 0x00000005C: string_len = r0  ' move string_len, r0
   CASE 0x00000005D: r0 = r0 + 1      ' inc r0
   CASE 0x00000005E: r1 = r1 + 1      ' inc r1
   CASE 0x00000005F: r2 = r2 + 1      ' inc r2
   CASE 0x000000060: r0 = r0 - 1      ' dec r0
   CASE 0x000000061: r1 = r1 - 1      ' dec r1
   CASE 0x000000062: r2 = r2 - 1      ' dec r2
   CASE 0x000000063:                  ' be  [address]  
    IF (r1 = r2) THEN pc = v
   CASE 0x000000064:                  ' bne [address]
    IF (r1 <> r2) THEN pc = v
   CASE 0x000000065:                  ' bg  [address]
    IF (r1 > r2) THEN pc = v          
   CASE 0x000000066:                  ' bge [address]
    IF (r1 >= r2) THEN pc = v
   CASE 0x000000067:                  ' ble [address]
    IF (r1 <= r2) THEN pc = v
   CASE 0x000000068:                  ' bl  [address]
    IF (r1 < r2) THEN pc = v
   CASE 0x000000069:                  ' jmp [address]
    pc = v
   CASE 0x00000006A:                  ' move.b r0, [address]
    r0 = peekb(v)
   CASE 0x00000006B:                  ' move.b [address], r0
    CALL pokeb v, r0
   CASE 0x000004000 TO 0x000007E70 ' Screen Memory(Text 0x000004000-
                                   '                     0x000007E70)    
    adr-=0x000004000 
    col0 = rgba(red0, green0, blue0, xalpha0)
    char_ptr=v:char_ptr <<=3
    x_axis0=adr mod char_w:x_axis0 << =3:x_axis0+=8*4
    y_axis0=adr  \  char_h:y_axis0 << =3:y_axis0+=8*4
    'screenlock
    FOR y_axis1 = 0 TO 7
  	  FOR x_axis1 = 0 TO 7 
	    IF xchar(char_ptr) AND (128 >> x_axis1) THEN
		  'pset(x_axis0+x_axis1,y_axis0+y_axis1),col0
	    ELSE
		  'pset(x_axis0+x_axis1,y_axis0+y_axis1),col1
	    ENDIF
	  NEXT
	  char_ptr+=1
    NEXT
    'screenunlock y_axis0,y_axis0+8
    adr+=0x000004000:v=ram(adr)
   CASE 0x0000A0000 ' Graphics Register Ports
    'line(x_axis0, y_axis0)-(x_axis0+pixel_size,y_axis0+pixel_size),_
    '     rgba(red2,green2,blue2,xalpha2), BF 
   CASE 0x0000A0001 
    'line(x_axis0, y_axis0)-(x_axis1, y_axis1), rgba(red2,green2,blue2,_
    '     xalpha2), , bitmask 
   CASE 0x0000A0002 
    'circle(x_axis0, y_axis1), radius, rgba(red2,green2,blue2,xalpha2)
   CASE 0x0000A0003
    r1 = (fov * x_axis0 / (z_axis0 + z_center) + x_center)
   CASE 0x0000A0004
    r2 = (fov * y_axis0 / (z_axis0 + z_center) + y_center)
   CASE 0x0000A0005
    r1 = ram(0x0000B0001) << 32 + ram(0x0000B0002) << 24 + ram(0x0000B0003) << 16 + ram(0x0000B0004) << 08 + ram(0x0000B0005)
	r2 = ram(0x0000B0006) << 32 + ram(0x0000B0007) << 24 + ram(0x0000B0008) << 16 + ram(0x0000B0009) << 08 + ram(0x0000B000A)
    points(r1).x_axis = r2
   CASE 0x0000A0006
    r1 = ram(0x0000B000B) << 32 + ram(0x0000B000C) << 24 + ram(0x0000B000D) << 16 + ram(0x0000B000E) << 08 + ram(0x0000B000F)
	r2 = ram(0x0000B0010) << 32 + ram(0x0000B0011) << 24 + ram(0x0000B0012) << 16 + ram(0x0000B0013) << 08 + ram(0x0000B0014)
    points(r1).y_axis = r2
   CASE 0x0000A0007
    r1 = ram(0x0000B0015) << 32 + ram(0x0000B0016) << 24 + ram(0x0000B0017) << 16 + ram(0x0000B0018) << 08 + ram(0x0000B0019)
	r2 = ram(0x0000B001A) << 32 + ram(0x0000B001B) << 24 + ram(0x0000B001C) << 16 + ram(0x0000B001D) << 08 + ram(0x0000B001E)
    points(r1).z_axis = r2
   CASE 0x0000A0008
    r1 = ram(0x0000B001F) << 32 + ram(0x0000B0020) << 24 + ram(0x0000B0021) << 16 + ram(0x0000B0022) << 08 + ram(0x0000B0023)
	r2 = ram(0x0000B0024) << 32 + ram(0x0000B0025) << 24 + ram(0x0000B0026) << 16 + ram(0x0000B0027) << 08 + ram(0x0000B0028)
    tris(r1).p1 = r2	 		   
   CASE 0x0000A0009
    r1 = ram(0x0000B0029) << 32 + ram(0x0000B002A) << 24 + ram(0x0000B002B) << 16 + ram(0x0000B002C) << 08 + ram(0x0000B002D)
	r2 = ram(0x0000B002E) << 32 + ram(0x0000B002F) << 24 + ram(0x0000B0030) << 16 + ram(0x0000B0031) << 08 + ram(0x0000B0032)
    tris(r1).p2 = r2	 		   
   CASE 0x0000A000A
    r1 = ram(0x0000B0033) << 32 + ram(0x0000B0034) << 24 + ram(0x0000B0035) << 16 + ram(0x0000B0036) << 08 + ram(0x0000B0037)
	r2 = ram(0x0000B0038) << 32 + ram(0x0000B0039) << 24 + ram(0x0000B003A) << 16 + ram(0x0000B003B) << 08 + ram(0x0000B003C)
    tris(r1).p3 = r2	
   CASE 0x0000A000B
    px1 = points(tris(tri_num).p1).x_axis
    px2 = points(tris(tri_num).p2).x_axis
    px3 = points(tris(tri_num).p3).x_axis
    py1 = points(tris(tri_num).p1).y_axis
    py2 = points(tris(tri_num).p2).y_axis
    py3 = points(tris(tri_num).p3).y_axis
    pz1 = points(tris(tri_num).p1).z_axis
    pz2 = points(tris(tri_num).p2).z_axis
    pz3 = points(tris(tri_num).p3).z_axis
  CASE 0x00000A000C
    x_axis0 = px1: z_axis0 = pz1
  CASE 0x00000A000D
    y_axis0 = py1: z_axis0 = pz1
  CASE 0x00000A000F
    x_axis0 = px2: z_axis0 = pz2
  CASE 0x00000A0010
    y_axis0 = py2: z_axis0 = pz2
  CASE 0x00000A0011
    x_axis0 = px2: z_axis0 = pz2
  CASE 0x00000A0012
    y_axis0 = py2: z_axis0 = pz2
  CASE 0x00000A0013
    x_axis0 = px3: z_axis0 = pz3
  CASE 0x00000A0014
    y_axis0 = py3: z_axis0 = pz3
  CASE 0x00000A0016
    x_axis0 = py3: z_axis0 = pz3
  CASE 0x00000A0017
    y_axis0 = py3: z_axis0 = pz3
  CASE 0x00000A0018
    x_axis0 = px1: z_axis0 = pz1
  CASE 0x00000A0019
    y_axis0 = py1: z_axis0 = pz1                                     
  CASE 0x00000A001A
  ' pset (r1, r2), rgba(red2,green2,blue2,xalpha2)     		       	 		    	 		   
  CASE 0x0000C0000 TO 0x0000C7FF0 ' Screen Memory(0x000C0000-0x000C7FF0)
                                  ' Reprogrammable character set
   adr-=0x000C0000: char(adr)=v: adr+=0x000C0000          
  ENDSELECT  
ENDSUB
                            
FUNCTION peekw(adr TYPE NUMBER) TYPE NUMBER
   LOCAL I = peekb(adr) or peekb(adr+1) << 8
   RETURN I
END FUNCTION

'sub pokew(adr as ulong, value as ushort)
'	Pokeb adr, lobyte(value)
'	Pokeb adr+1, hibyte(value)
'end sub

DECLARE get_key, get_data, old_data(10000) TYPE NUMBER
DECLARE data_pointer = 1, repeat, count TYPE NUMBER
DECLARE integer prompt_flag = 1, lineNo TYPE NUMBER

'screenres 1366, 768, 32
'screeninfo screen_width, screen_height, bits_per_pixel, bytes_per_pixel, _ 
'           bytes_per_scanline, refresh_rate, driver_name 
x_center = screen_width / 2: y_center = screen_height / 2
z_center = y_center + 16: fov = z_center

const pi = 3.141592654#

' initialize sin and cos tables 
FOR r0 = 0 TO 356
 sin_table(r0) = sin(r0 * pi / 180)
 cos_table(r0) = cos(r0 * pi / 180)
NEXT 

'pokeb 0x000000001,100: pokeb 0x000000020,0 ' x_axis0=100 
'pokeb 0x000000001,100: pokeb 0x000000022,0 ' y_axis0=100
'pokeb 0x000000001,255: pokeb 0x00000002E,0 ' radius=255
' x_axis0=100: y_axis0=100: radius=100
' pokeb 0x0000A0002,0
' ram(00)=0x01: ram(05)=0x64: ram(6)=0x20 ' x_axis0=100
' ram(12)=0x01: ram(17)=0x64: ram(18)=0x22' y_axis0=100
' ram(24)=0x01: ram(29)=0x64: ram(30)=0x2E' radius=100
' ram(39)=0x0A: ram(40)=0x00: ram(41)=0x02' draw circle
DO
	key = asc(inkey$)                                    ' scan keyboard register
'	getmouse mouse_x, mouse_y, mouse_w, mouse_b, mouse_c ' scan mouse registers
'	getjoystick joystick_id, joystick_b, a1, a2, a3, _   ' scan joystick registers
'	            a4, a5, a6, a7, a8
	'print hex$(pc)
		            
	SELECT CASE ram(pc)
	    ' register port addresses 0x000000001-0x00000006B 
		CASE 0x000000001 to 0x00000006B
	     r3 = ram(pc + 1) << 32 + ram(pc + 2) << 24 + ram(pc + 3) << 16 + ram(pc + 4) << 08 + ram(pc + 5)
		CALL pokeb ram(pc), r3: pc = pc + 6
'	 print hex(pc)+":"+hex$(ram(pc)), x_axis0, y_axis0, radius: sleep	    
        CASE 0x00000006F ' peekb adr0
	     adr0 = ram(pc + 1) << 32 + ram(pc + 2) << 24 + ram(pc + 3) << 16 + ram(pc + 4) << 08 + ram(pc + 5)
	     r3 = peekb(adr0): pc = pc + 6       
	    CASE 0x000000070 ' pokeb adr0, r3
	     adr0 = ram(pc + 1) << 32 + ram(pc + 2) << 24 + ram(pc + 3) << 16 + ram(pc + 4) << 08 + ram(pc + 5)
	     r3   = ram(pc + 6)
	    CALL pokeb adr0, r3 : pc = pc + 7      
	    CASE 0x000000071 ' peekw r3
	     adr0 = ram(pc + 1) << 32 + ram(pc + 2) << 24 + ram(pc + 3) << 16 + ram(pc + 4) << 08 + ram(pc + 5)
	     r3 = peekw(adr0): pc = pc + 6       
	    CASE 0x000000072 ' pokew adr0, r3
	     adr0 = ram(pc + 1) << 32 + ram(pc + 2) << 24 + ram(pc + 3) << 16 + ram(pc + 4) << 08 + ram(pc + 5)
	     r3  =  ram(pc + 6) << 32 + ram(pc + 7) << 24 + ram(pc + 8) << 16 + ram(pc + 9) << 08 + ram(pc + 10)
	    CALL pokew adr0, r3: pc = pc + 11
	    CASE 0x000000073 ' pokeb [address],[address]
	     adr0 = ram(pc + 1) << 32 + ram(pc + 2) << 24 + ram(pc + 3) << 16 + ram(pc + 4) << 08 + ram(pc + 5)
	     adr1 = ram(pc + 6) << 32 + ram(pc + 7) << 24 + ram(pc + 8) << 16 + ram(pc + 9) << 08 + ram(pc + 10)
	    CALL pokeb adr0, peekb(adr1): pc = pc + 11       
	    CASE 0x000000074 ' pokew [address],[address]
			 adr0 = ram(pc + 1) << 32 + ram(pc + 2) << 24 + ram(pc + 3) << 16 + ram(pc + 4) << 08 + ram(pc + 5)
			 adr1 = ram(pc + 6) << 32 + ram(pc + 7) << 24 + ram(pc + 8) << 16 + ram(pc + 9) << 08 + ram(pc + 10)
	    CALL pokew adr0, peekw(adr1): pc = pc + 11
	    CASE 0x000000075 ' Display number [screen memory address]
	     adr0 = ram(pc + 1) << 32 + ram(pc + 2) << 24 + ram(pc + 3) << 16 + ram(pc + 4) << 08 + ram(pc + 5)
	     string_data = str$(r0)             
	     FOR r3 = 1 TO len(string_data)             
		  CALL pokeb (char_buffer+adr0)+(r3-1),asc(mid$(string_data,r3,1))
	     NEXT r3: pc = pc + 6 
	    CASE 0x000000076 ' Display text [string address],[length],
		  			     '              [screen adr]
	     string_adr = ram(pc + 1) << 32 + ram(pc + 2) << 24 + ram(pc + 3) << 16 + ram(pc + 4) << 08 + ram(pc + 5)
	     string_len = ram(pc + 6) << 32 + ram(pc + 7) << 24 + ram(pc + 8) << 16 + ram(pc + 9) << 08 + ram(pc + 10)
	     adr0       = ram(pc + 11) << 32 + ram(pc + 12) << 24 + ram(pc + 13) << 16 + ram(pc + 14) << 08 + ram(pc + 15)		                
	     FOR r3 = 0 TO string_len
		  CALL pokeb (char_buffer + adr0) + r3, ram(string_adr + r3) 		    
	     NEXT r3: pc = pc + 16                                                           
	ENDSELECT
	adr0 = ram(pc + 1)  <<  32 + ram(pc + 2) << 24 + ram(pc + 3)  <<  16 + ram(pc + 4) << 08 + ram(pc + 5)
    'print hex$(adr0)
    'print hex$(0x0000A0000): sleep
    'print ram(pc + 1), ram(pc + 2), ram(pc + 3), ram(pc + 3), ram(pc + 4)		    	
	SELECT adr0
		CASE 0x000004000 to 0x000007E70 ' text memory
		 r3   = ram(adr0 + 1): pokeb adr0, r3: pc = pc + 3 
		CASE 0x0000A0000 to 0x0000AFFFF ' graphics port addresses     
		 CALL pokeb adr0, 0: pc = pc + 3		    	
	ENDSELECT
    pc = (pc mod 0x10FFFFFF)  
'	pc = (pc + 1) mod 0x10FFFFFF

    IF prompt_flag = 1 THEN PRINT "*";: prompt_flag = 0
    get_key = inkey$
  
    IF asc(get_key) > 31 AND asc(get_key) < 127 THEN 
       PRINT get_key;
       get_data = get_data + get_key
    ELSE
     IF get_key = chr$(13) THEN
        PRINT chr$(13) 
       data_pointer = 1: prompt_flag = 1 
       old_data(lineNo) = get_data: get_data = ""
       lineNo = lineNo + 1
     ENDIF  
    ENDIF 
DONE