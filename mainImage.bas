	 select case v  
	  case &H00 ' start of GLSL shader
	    filename  = "tmp.glsl"
	    open filename for output as #1
	    print #1, "// The MIT License"
	    print #1, "// Dartmouth BASIC Copyright © 1964-1979 John G. Kemény, Thomas E. Kurtz"
	    print #1, "// Microsoft BASIC      Copyright © 1975-present Microsoft Corporation"    
	    print #1, "// Commodore KERNAL ROM Copyright © 1977-1994 Commodore International Limited"		    
	    print #1, "//                      Copyright © 1995-1996 Escom"
	    print #1, "//                      Copyright © 1997-2008 Tulip Computers NV"
	    print #1, "//                      Copyright © 2008-2009 Nedfield NV"
	    print #1, "// MOS Technology 6510  Copyright © 1982-2001 MOS Technology, Inc."
	    print #1, "// OpenGL Shading Language Copyright © 2004-2006 OpenGLARB"
	    print #1, "//    		    	      Copyright © 2006-present The Khronos Group, Inc."
	    print #1, "// FreeBASIC Copyright © 2004-present The FreeBASIC Development Team"
	    print #1, "// Shadertoy Copyright © 2013-present Inigo Quilez & Pol Jeremias"
	    print #1, "// Project Manhattan Copyright © 2019-present Jacob Dahlen"
	    print #1, "// Permission is hereby granted, free of charge, to any person "
	    print #1, "// obtaining a copy of this software and associated documentation "
	    print #1, "// files (the 'Software'), to deal in the Software without restriction,"
	    print #1, "// including without limitation the rights to use, copy, modify, merge, "
	    print #1, "// publish, distribute, sublicense, and/or sell copies of the Software, "
	    print #1, "// and to permit persons to whom the Software is furnished to do so, "
	    print #1, "// subject to the following conditions: The above copyright notice and"
	    print #1, "// this permission notice shall be included in all copies or" 
	    print #1, "// substantial portions of the Software." 
	    print #1, ""
	    print #1, "// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND," 
	    print #1, "// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES" 
	    print #1, "// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND" 
	    print #1, "// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT" 
	    print #1, "// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY," 
	    print #1, "// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM," 
	    print #1, "// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER" 
	    print #1, "// DEALINGS IN THE SOFTWARE."
        #include once "shader.bi"
        print #1, "void mainImage( out vec4 fragColor, in vec2 fragCoord )"
        print #1, "{"	    
	  case &H01 ' End of GLSL shader
	    print #1, "}"
		close #1
      case &H02: print #1, "vec2 uv,p;"  		
      case &H03: print #1, "vec2 uv = fragCoord/iResolution.xy;"
      case &H04: print #1, "vec2 uv = fragCoord.xy/iResolution.xy;" 
      case &H05: print #1, "vec2 uv = fragCoord.xy/iResolution.xy-0.5;"
	  case &H06: print #1, "vec2 uv = (fragCoord.xy * 2.0 / iResolution.xy) - vec2(1);"
      case &H07: print #1, "vec2 uv2= gl_FragCoord.xy/iResolution.xy;"
      case &H08: print #1, "vec2 uv2 = vec2(2.0,2.0*hfactor)*fragCoord.xy/iResolution.xy-vec2(1.0,hfactor);"      	  
      case &H09: print #1, "vec2 mo = iMouse.xy/iResolution.xy;"
	  case &H0A: print #1, "vec2 o = vec2(float(m),float(n)) / float(AA) - 0.5;"
	  case &H0B: print #1, "vec2 p = (2.0*fragCoord-iResolution.xy)/iResolution.y;"
	  case &H0C: print #1, "vec2 p = (-iResolution.xy+2.0*fragCoord)/iResolution.y;"
	  case &H0D: print #1, "vec2 p = (-iResolution.xy+2.0*fragCoord.xy)/iResolution.y;"
	  case &H0E: print #1, "vec2 p = (2.0*(fragCoord+o)-iResolution.xy)/iResolution.y;"
	  case &H0F: print #1, "vec2 p = (-iResolution.xy+2.0*(fragCoord+o))/iResolution.y;"
	  case &H10: print #1, "vec2 p = (-iResolution.xy+2.0*(fragCoord.xy+rr))/iResolution.y;"
	  case &H11: print #1, "vec2 px = (2.0*(fragCoord+vec2(1.0,0.0))-iResolution.xy)/iResolution.y;"
	  case &H12: print #1, "vec2 py = (2.0*(fragCoord+vec2(0.0,1.0))-iResolution.xy)/iResolution.y;"
	  case &H13: print #1, "vec2 q = fragCoord/iResolution.xy;"
	  case &H14: print #1, "vec2 q = fragCoord.xy/iResolution.xy;"
	  case &H15: print #1, "vec2 q = (fragCoord.xy+rr)/iResolution.xy;"
	  case &H16: print #1, "vec2 rr = vec2( float(m), float(n) ) / float(AA);"
	  case &H17: print #1, "vec2 v = -1.0 + 2.0 * fragCoord.xy / iResolution.xy;"
	  case &H18: print #1, "vec3 v=vec3(0.0);"
	  case &H19: print #1, "vec3 p=from+s*dir*.5;"	
	  case &H1A: print #1, "vec3 c = render(ro, rd);"
	  case &H1B: print #1, "vec3 from=vec3(1.,.5,0.5);"
	  case &H1C: print #1, "vec3 dir=vec3(uv*zoom,1.);"
	  case &H1D: print #1, "vec3 col = vec3(0.0);"	   	  
	  case &H1E: print #1, "vec3 col = render( ro, rd, q );"
	  case &H1F: print #1, "vec3 col = render( ro, rd, time );"
	  case &H20: print #1, "vec3 col = render( ro, rd, rdx, rdy );"
      case &H21: print #1, "vec3 col = 0.5 + 0.5*cos(iTime+uv.xyx+vec3(0,2,4));"
	  case &H22: print #1, "vec3 ta = vec3( 0,0.4,0);"
	  case &H23: print #1, "vec3 ta = vec3(-0.6,0.2,0.0);"
	  case &H24: print #1, "vec3 ta = vec3( 0.5, -0.4, -0.5 );"
	  case &H25: print #1, "vec3 ta = vec3( -0.5, -0.4,  0.5 );"	  
	  case &H26: print #1, "vec3 ta = vec3( 0.0, 0.65, -0.6+time*1.0 - 0.4*cl);"
	  case &H27: print #1, "vec3 ro;"  
	  case &H28: print #1, "vec3 ro = ta + vec3( 1.3*cos(an), -0.250, 1.3*sin(an) );"
	  case &H29: print #1, "vec3 ro = vec3(-0.4,0.2,0.0) + 2.2*vec3(cos(an),0.0,sin(an));"
	  case &H2A: print #1, "vec3 ro = vec3(cos(time + mo.x)*X, Y, X*sin(time + mo.x) )*R;"
	  case &H2B: print #1, "vec3 ro = ta + vec3( 4.5*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 4.5*sin(0.1*time + 6.0*mo.x) );"
	  case &H2C: print #1, "vec3 ro = vec3( -0.5+3.5*cos(0.1*time + 6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 4.0*sin(0.1*time + 6.0*mo.x) );"
	  case &H2D: print #1, "vec3 tot = vec3(0.0);"
	  case &H2E: print #1, "vec3 rd = ca * normalize( vec3(p,2.5));"
	  case &H2F: print #1, "vec3 rd = ca * normalize( vec3(p,1.8));"
	  case &H30: print #1, "vec3 rd = normalize( ca * vec3(p,-2.8));"
	  case &H31: print #1, "vec3 rd = normalize(p.x*cu+p.y*cv+7.5*cw);"		  
	  case &H32: print #1, "vec3 rd = ca * normalize( vec3(uv.xy,2.5));"
	  case &H33: print #1, "vec3 rd = ca  * normalize( vec3(p.xy,2.0));"  	  
 	  case &H34: print #1, "vec3 rdx = ca * normalize( vec3(px,2.5));"
	  case &H35: print #1, "vec3 rdy = ca * normalize( vec3(py,2.5));" 
	  case &H36: print #1, "vec3 cw = normalize(vec3(0., 0.25, 0.) - ro);"	
	  case &H37: print #1, "vec3 cp = vec3(0.0, 1.0, 0.0);"    
	  case &H38: print #1, "vec3 cu = normalize(cross(cw, cp));"
	  case &H39: print #1, "vec3 cv = normalize(cross(cu, cw));" 
	  case &H3A: print #1, "vec3 pos = ro + rd *t;"	
	  case &H3B: print #1, "vec3 nor = calcNormal(pos);"	
	  case &H3C: print #1, "vec3 ligvec = SURFACE_COLOR;"	
	  case &H3D: print #1, "vec3 lig = normalize(ligvec);"	
	  case &H3E: print #1, "vec3 color = (3.5-0.35*t)*getColor(1);"	
	  case &H3F: print #1, "vec3 ro2r = pos-rd/t;"	
	  case &H40: print #1, "vec3 rd2r = reflect(rd,nor);"	
	  case &H41: print #1, "vec3 pos2r = vec3(0.0);"	
	  case &H42: print #1, "vec3 nor2r = calcNormal(pos2r);"    
	  case &H43: print #1, "vec3 rd2 = refract(rd,nor,0.78);"	
	  case &H44: print #1, "vec3 pos2 = pos + rd2* t2;"	
	  case &H45: print #1, "vec3 nor2 = calcNormal(pos2);"    
	  case &H46: print #1, "vec3 ro3 = pos2+rd;" 	
	  case &H47: print #1, "vec3 rd3 = rd2+0.002*rand1(gl_FragCoord.xy);"	 
	  case &H48: print #1, "vec3 pos3 = ro3 + rd3* t3;"	
	  case &H49: print #1, "vec3 nor3 = calcNormal(pos3);"
	  case &H4A: print #1, "vec3 org = vec3(0., -2., 4.);"
	  case &H4B: print #1, "vec3 dir = normalize(vec3(v.x*1.6, -v.y, -1.5));"
	  case &H4C: print #1, "vec4 p = raymarch(org, dir);"
	  case &H4D: print #1, "vec4 col = mix(vec4(1.,.5,.1,1.), vec4(0.1,.5,1.,1.), p.y*.02+.4);"	  
	  case &H4E: print #1, "vec3 rO = camPos;"
	  case &H4F: print #1, "vec3 finalPos = rO;"
	  case &H50: print #1, "vec3 camX   = vec3( 1.0, 0.0, 0.0);"
	  case &H51: print #1, "vec3 camY   = vec3( 0.0, 1.0, 0.0);"
	  case &H52: print #1, "vec3 camZ   = vec3( 0.0, 0.0, 1.0);"
	  case &H53: print #1, "vec3 albedo = vec3( 0.0, 0.0, 0.0);"
	  case &H54: print #1, "vec3 normal = vec3( 0.0, 0.0, 0.0);"		
	  case &H55: print #1, "vec3 camPos = vec3( 20.0, 18.0,-50.0);"
	  case &H56: print #1, "vec3 rD = normalize(uv2.x*camX + uv2.y*camY + camZ);"
	  case &H57: print #1, "vec3 color=(albedo/3.14)*evaluateLight(finalPos,normal)*volumetricShadow(finalPos,LPOS);"
	  case &H58: print #1, "vec4 scatTrans = vec4( 0.0, 0.0, 0.0, 0.0 );"
	  case &H59: print #1, "fragColor = vec4(c,1.0);"
      case &H5A: print #1, "fragColor = vec4(col,1.0);"
  	  case &H5B: print #1, "fragColor = vec4(tot,1.0);"
  	  case &H5C: print #1, "fragColor = vec4(color,1.0);"  	  
  	  case &H5D: print #1, "fragColor = vec4(v*0.01,1.0);"
	  case &H5E: print #1, "fragColor = vec4(col*blend,1.0);"  	  
	  case &H5F: print #1, "fragColor.rgb += bgColor(uv);"
	  case &H60: print #1, "fragColor.rgb = render(ro,rd);"
	  case &H61: print #1, "fragColor.rgb += beam(uv*vec2(iResolution.x/iResolution.y, 1));"	  
	  case &H62: print #1, "fragColor.rgb += prism(uv*vec2(iResolution.x/iResolution.y, 1));"
	  case &H63: print #1, "fragColor = mix(vec4(0.), col, pow(glow*2.,4.));"	  
	  case &H64: print #1, "fragColor = vec4(sunmask*sunColor(uv * vec2(iResolution.x/iResolution.y / 1.4, 1)), 1);"
	  case &H65: print #1, "float pa,a=pa=0.0;"
	  case &H66: print #1, "float s=0.1,fade=1.0;"			
	  case &H67: print #1, "float dm=max(0.,darkmatter-a*a*.001);"
	  case &H68: print #1, "float a1=.5+iMouse.x/iResolution.x*2.;"
	  case &H69: print #1, "float a2=.8+iMouse.y/iResolution.y*2.;"
	  case &H6A: print #1, "float glow = p.w;"
	  case &H6B: print #1, "float R = 4.3;"    
	  case &H6C: print #1, "float Y = sin(mo.y);"
	  case &H6D: print #1, "float X = cos(mo.y);"
	  case &H6E: print #1, "float x = 3.0 * cos(theta);" 
	  case &H6F: print #1, "float z = 3.0 * sin(theta);"    	  
	  case &H70: print #1, "float time = iTime;"
	  case &H71: print #1, "float time =iTime*0.1;"
	  case &H72: print #1, "float time = 15.0 + iTime;"
	  case &H73: print #1, "float time=iTime*speed+0.25;"
	  case &H74: print #1, "float time = 15.0 + iTime*1.5;"
	  case &H75: print #1, "float time = iTime - 0.5*(1.0/24.0)*(float(m*AA+n)+d)/float(AA*AA-1);"
	  case &H76: print #1, "float cl = sin(0.5*time);"
	  case &H77: print #1, "float an = 1.57 + 0.7*sin(0.15*time);"
	  case &H78: print #1, "float an = 1.87 - 0.04*(1.0-cos(0.5*iTime));"
	  case &H79: print #1, "float d = 0.5*sin(fragCoord.x*147.0)*sin(fragCoord.y*131.0);"
	  case &H7A: print #1, "float ti = fract(time-0.15);"
	  case &H7B: print #1, "float t4 = abs(fract(time*0.5)-0.5)/0.5;"
	  case &H7C: print #1, "float sunmask = smoothstep(-sunmaskfeather, sunmaskfeather, uv.y - horizonHeight(uv));"	  
	  case &H7D: print #1, "float bou = -1.0 + 2.0*t4;"
	  case &H7E: print #1, "float t = castRay(ro,rd,12.);"
	  case &H7F: print #1, "float t2 = castRay2(pos, rd2);"	
	  case &H80: print #1, "float sh = softshadow(pos, lig);"
	  case &H81: print #1, "float t3 = castRay(ro3, rd3, 10.);"  	    
	  case &H82: print #1, "float theta = sin(iTime*0.1) * 6.28;"
	  case &H83: print #1, "float t2r = castRay(ro2r, rd2r, 7.0);"	    		
	  case &H84: print #1, "float dif = clamp(dot(lig, nor),0.,1.);"
	  case &H85: print #1, "float dif2 = clamp(dot(lig, nor2), 0.0, 1.0);"
	  case &H86: print #1, "float dif3 = clamp(dot(lig, -nor3), 0.0, 1.0);"    
	  case &H87: print #1, "float dif2r = clamp(dot(lig, nor2r), 0.0, 1.0);"
	  case &H88: print #1, "float blend=min(2.*abs(sin((0.1*iTime)*PI/3.2)),1.0);" 		
	  case &H89: print #1, "float spec = pow(clamp(dot(reflect(rd, nor), lig),0.,1.),16.);"
	  case &H8A: print #1, "float spec2 = pow(clamp(dot(reflect(rd2, nor2), lig),0.,1.),16.);"			 	   
	  case &H8B: print #1, "float spec2r = pow(clamp(dot(reflect(rd2r, nor2r), lig), 0.0, 1.0), 16.0);"
	  case &H8C: print #1, "float hfactor = float(iResolution.y) / float(iResolution.x);"
	  case &H8D: print #1, "mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));"
	  case &H8E: print #1, "mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));"
	  case &H8F: print #1, "mat3 ca = setCamera( ro, ta, 0.0 );"
	  case &H90: print #1, "mat3 ca = setCamera( ro, ta );"
	  case &H91: print #1, "#if AA>1"
	  case &H92: print #1, "for( int m=ZERO; m<AA; m++ )"
	  case &H93: print #1, "for( int n=ZERO; n<AA; n++ )"
	  case &H94: print #1, "for (int r=0; r<volsteps; r++) {"
	  case &H95: print #1, "for (int i=0; i<iterations; i++) {"
	  case &H96: print #1, "{"
	  case &H97: print #1, "#else"
	  case &H98: print #1, "#endif"
	  case &H99: print #1, "col+=.6*spec2;"
	  case &H9A: print #1, "col.g+=.3*dif2;"	  
	  case &H9B: print #1, "col.r+=0.3*dif2;"
	  case &H9C: print #1, "col.b+=0.3*dif2;"	  
	  case &H9D: print #1, "col /= float(AA*AA);"
	  case &H9E: print #1, "col+=0.1*dif3*color;"
	  case &H9F: print #1, "col*=clamp(sh, 0.0, 1.0);"	  	  
	  case &HA0: print #1, "col /= sin(float(AA*AA));"
	  case &HA1: print #1, "col = 1.35*col/(1.0+col);"
	  case &HA2: print #1, "col+=0.04*(1.-dif3)*color;"
	  case &HA3: print #1, "col-=1.-dot(uv,1.-uv)*2.4;"
	  case &HA4: print #1, "col=0.3*dif+0.5*color+spec;"	  	  
	  case &HA5: print #1, "col += render( ro, rd, q );"
	  case &HA6: print #1, "col+=0.1*(dif2r*color+spec2r);"    			
	  case &HA7: print #1, "col-=0.04*rand1(uv2.xy*iTime);"	  
      case &HA8: print #1, "col = pow( col, vec3(0.4545));"
	  case &HA9: print #1, "col = col*vec3(1.11,0.89,0.79);"
	  case &HAA: print #1, "col*=.9+.1*sin(2.*uv2.y*iResolution.y);"
	  case &HAB: print #1, "col=mix(col, vec3(.4,.5,.6), exp(-(2.-(0.18*t)) ) );"    
	  case &HAC: print #1, "tot += col;"
	  case &HAD: print #1, "tot /= float(AA*AA);"
	  case &HAE: print #1, "tot = clamp(tot,0.0,1.0);"
	  case &HAF: print #1, "tot = tot*tot*(3.0-2.0*tot);"
	  case &HB0: print #1, "tot *= 0.5 + 0.5*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.25);"
	  case &HB1: print #1, " }"
	  case &HB2: print #1, "time += -2.6;"
	  case &HB3: print #1, "time *= 0.9;"
	  case &HB4: print #1, "ti = 4.0*ti*(1.0-ti);"
	  case &HB5: print #1, "ta.y += 0.15*ti*ti*(3.0-2.0*ti)*smoothstep(0.4,0.9,cl);"
	  case &HB6: print #1, "ro += 0.06*sin(time*12.0+vec3(0.0,2.0,4.0))*smoothstep( 0.85, 1.0, abs(bou) );"
	  case &HB7: print #1, "uv.x*=iResolution.x/iResolution.y;"
	  case &HB8: print #1, "uv.x = 1.0+ (mod(gl_FragCoord.x-(iResolution.x/2.),((iResolution.x/4.)*(-1.5*blend+0.501)+(iResolution.x/4.)))-1.*gl_FragCoord.x)/iResolution.x;"
	  case &HB9: print #1, "uv.x = 1.0+(mod(gl_FragCoord.x-sin(iTime)*gl_FragCoord.y-(iResolution.x/2.),((iResolution.x/4.)*(-1.5*blend+0.501) +(iResolution.x/4.)))-(1.*gl_FragCoord.x))/iResolution.x;"
	  case &HBA: print #1, "uv.y = 1.0-(gl_FragCoord.y /iResolution.y);"
	  case &HBB: print #1, "uv.y = 1.0+(mod(gl_FragCoord.y+sin(iTime)*gl_FragCoord.x-(iResolution.y/2.),((iResolution.y/4.)*(-1.5*blend+0.501) +(iResolution.y/4.)))-(1.*gl_FragCoord.y))/iResolution.y;"
	  case &HBC: print #1, "uv.y*=iResolution.y/iResolution.x;"	  
	  case &HBD: print #1, "if (r>6) fade*=1.-dm;"
	  case &HBE: print #1, "if (mo.x==mo.y && mo.x==0.0) {"
	  case &HBF: print #1, "if (t3>=10.0)t3=10.0;"
	  case &HC0: print #1, "if (t>= 12.0) t=12.0;"    
	  case &HC1: print #1, "if (iTime>150.0) ef=1;"    
	  case &HC2: print #1, "if (iTime>30.0 && iTime<60.0) ef=1;"
	  case &HC3: print #1, "if (iTime>60.0 && iTime<90.0) ef=2;"
	  case &HC4: print #1, "if (iTime>90.0 && iTime<120.0) ef=3;"
	  case &HC5: print #1, "if (iTime>120.0 && iTime<150.0)ef=0;"    
	  case &HC6: print #1, "if (ef==0||ef==2)"     
	  case &HC7: print #1, "if (ef==1||ef==3)"    
	  case &HC8: print #1, "if (ef==1) ro = vec3(x*0.2+1.0, 4.0, 0.6*z-3.);"
	  case &HC9: print #1, "if (ef==4) ro = vec3(0.0, 0.3+0.10*iTime, 0.001);"
	  case &HCA: print #1, "if (ef==3) ro = vec3(0.0, 36.-0.24*iTime, 0.001);"	
	  case &HCB: print #1, "if (ef==0||ef==2) ro = vec3(x*2.0, 2.0+2.*sin((iTime+37.)*0.15), z*1.4);"
	  case &HCC: print #1, "if (ef==4){ uv.xy = gl_FragCoord.xy /iResolution.xy; p = uv * 2.0 - 1.0;}"
	  case &HCD: print #1, "if (ef==4||ef==2||ef==1) ligvec = vec3(0.4*sin(iTime*0.2), 1.0, 0.4*cos(iTime*0.3))*1.0;"	  
	  case &HCE: print #1, "if(iMouse.x+iMouse.y > 0.0)"
	  case &HCF: print #1, "if(abs(fragCoord.x-(iResolution.x*0.5))<0.6)" 
	  case &HD0: print #1, "mo = vec2(0.42,0.4);"
	  case &HD1: print #1, "mo.y+=0.02;"
	  case &HD2: print #1, "mo.y *=1.57;"
	  case &HD3: print #1, "mo.x*=10.0;"
	  case &HD4: print #1, "#define sunmaskfeather 0.013"
	  case &HD5: print #1, "p = (1.-uv) * 2.0 - 1.0;"
	  case &HD6: print #1, "p=abs(p)/dot(p,p)-formuparam;"
	  case &HD7: print #1, "p = abs(vec3(tile)-mod(p,vec3(tile*2.)));"
	  case &HD8: print #1, "p.x *= iResolution.x/iResolution.y;"
	  case &HD9: print #1, "pos2r = ro2r + rd2r* t2r;"	
	  case &HDA: print #1, "pos2 = pos + rd2* t2;"
	  case &HDB: print #1, "rd2 = refract(rd,nor,0.8);"	
	  case &HDC: print #1, "rd2 = refract(rd,nor,0.82);" 	 
	  case &HDD: print #1, "t2 = castRay2(pos, rd2);"
	  case &HDE: print #1, "nor2 = calcNormal(pos2);"      
	  case &HDF: print #1, "dif2 = clamp(dot(lig, nor2), 0.0,1.0);"
	  case &HE0: print #1, "color = clamp(1.+(1.-0.2*t3)*getColor(1),0.0,8.0);"
	  case &HE1: print #1, "color.r = 0.5;"
	  case &HE2: print #1, "color = color * scatTrans.w + scatTrans.xyz;"
	  case &HE3: print #1, "color = pow(color, vec3(1.0/2.2));"
	  case &HE4: print #1, "traceScene( fragCoord.x>(iResolution.x/2.0),rO,rD,finalPos,normal,albedo,scatTrans);"
	  case &HE5: print #1, "camPos+=vec3(0.05,0.12,0.0)*(vec3(iMouse.x,iMouse.y,0.0)-vec3(iResolution.xy*0.5,0.0));" 
	  case &HE6: print #1, "#ifndef D_DEMO_FREE"
	  case &HE7: print #1, "v.x *= iResolution.x/iResolution.y;"
	  case &HE8: print #1, "#if AA<2"	  	  	                        	  
     end select




 
   

    


	



    

