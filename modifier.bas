case &H1C' modifier types
	 select case mem64(sys_offset+&HC8)
			case &H00: modifier="DATA_TRANSFER"
			case &H01: modifier="MESH_CACHE"
			case &H02: modifier="MESH_SEQUENCE_CACHE"
			case &H03: modifier="NORMAL_EDIT"
			case &H04: modifier="UV_PROJECT"
			case &H05: modifier="UV_WARP"
			case &H06: modifier="VERTEX_WEIGHT_EDIT"
			case &H07: modifier="VERTEX_WEIGHT_MIX"
			case &H08: modifier="VERTEX_WEIGHT_PROXIMITY"
			case &H09: modifier="ARRAY"
			case &H0A: modifier="BEVEL"
			case &H0B: modifier="BOOLEAN"
			case &H0C: modifier="BUILD"
			case &H0D: modifier="DECIMATE"
			case &H0E: modifier="EDGE_SPLIT"
			case &H0F: modifier="MASK"
			case &H10: modifier="MIRROR"
			case &H11: modifier="MULTIRES"
			case &H12: modifier="REMESH"
			case &H13: modifier="SCREW"
			case &H14: modifier="SKIN"
			case &H15: modifier="SOLIDIFY"
			case &H16: modifier="SUBSURF"
			case &H17: modifier="TRIANGULATE"
			case &H18: modifier="WIREFRAME"
			case &H19: modifier="ARMATURE"
			case &H1A: modifier="CAST"
			case &H1B: modifier="CORRECTIVE_SMOOTH"
			case &H1C: modifier="CURVE"
			case &H1D: modifier="DISPLACE"
			case &H1E: modifier="HOOK"
			case &H1F: modifier="LAPLACIANSMOOTH"
			case &H20: modifier="LAPLACIANDEFORM"
			case &H21: modifier="LATTICE"
			case &H23: modifier="MESH_DEFORM"
			case &H24: modifier="SHRINKWRAP"
			case &H25: modifier="WARP"
			case &H26: modifier="WAVE"
			case &H27: modifier="CLOTH"
			case &H28: modifier="COLLISION"
			case &H29: modifier="DYNAMIC_PAINT"
			case &H2A: modifier="EXPLODE"
			case &H2B: modifier="FLUID_SIMULATION"
			case &H2C: modifier="OCEAN"
			case &H2D: modifier="PARTICLE_INSTANCE"
			case &H2E: modifier="PARTICLE_SYSTEM"
			case &H2F: modifier="SMOKE"
			case &H30: modifier="SOFT_BODY"
	  end select
case &H1D' modifer types
	  select case mem64(sys_offset+&HC8)
			 case &H00: modtype="DataTransfer"
			 case &H01: modtype="Mesh Cache"
			 case &H02: modtype="Mesh Sequence Cache"
			 case &H03: modtype="Set Split Normals"
			 case &H04: modtype="UVProject"
			 case &H05: modtype="UVWarp"
			 case &H06: modtype="VertexWeightEdit"
			 case &H07: modtype="VertexWeightMix"
			 case &H08: modtype="VertexWeightProximity"
			 case &H09: modtype="Array"
			 case &H0A: modtype="Bevel"
			 case &H0B: modtype="Boolean"
			 case &H0C: modtype="Build"
			 case &H0D: modtype="Decimate"
			 case &H0E: modtype="EdgeSplit"
			 case &H0F: modtype="Mask"
			 case &H10: modtype="Mirror"
			 case &H11: modtype="Multires"
			 case &H12: modtype="Remesh"
			 case &H13: modtype="Screw"
			 case &H14: modtype="Skin"
			 case &H15: modtype="Solidify"
			 case &H16: modtype="Subsurf"
			 case &H17: modtype="Triangulate"
			 case &H18: modtype="Wireframe"
			 case &H19: modtype="Armature"
			 case &H1A: modtype="Cast"
			 case &H1B: modtype="CorrectiveSmooth"
			 case &H1C: modtype="Curve"
			 case &H1D: modtype="Displace"
			 case &H1E: modtype="Hook"
			 case &H1F: modtype="Laplacian Smooth"
			 case &H20: modtype="LaplacianDeform"
			 case &H21: modtype="Lattice"
			 case &H22: modtype="MeshDeform"
			 case &H23: modtype="Shrinkwrap"
			 case &H24: modtype="SimpleDeform"
			 case &H25: modtype="Smooth"
			 case &H26: modtype="Surface Deform"
			 case &H27: modtype="Warp"
			 case &H28: modtype="Wave"
			 case &H29: modtype="Cloth"
			 case &H2A: modtype="Dynamic Paint"
			 case &H2B: modtype="Softbody"
			 case &H2C: modtype="Fluidsim"
			 case &H2D: modtype="Smoke"
	  end select	    		  			  
case &H1E
	  select case mem64(sys_offset+&HC8)
			 case &H00: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].ray_radius = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H01: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].frame_start = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H02: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].frame_scale = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H03: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].frame_duration = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H04: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].offset[0] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H05: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].offset[1] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H06: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].offset[2] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H07: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].projector_count = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H08: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].aspect_x = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H09: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].aspect_y = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H0A: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].center[0] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H0B: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].center[1] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H0C: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].default_weight = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H0D: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mask_constant = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H0E: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'LINEAR'"
			 case &H0F: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'CURVE'"
			 case &H10: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'SHARP'"
			 case &H11: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'SMOOTH'"
			 case &H12: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'ROOT'"
			 case &H13: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'ICON_SPHERECURVE'"
			 case &H14: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'RANDOM'"
			 case &H15: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'STEP'"
			 case &H16: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'NONE'"
			 case &H17: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'SPHERE'"
			 case &H18: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'INVERSE_SQUARE'"
			 case &H19: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_type = 'CONSTANT'"
			 case &H1A: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_radius = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H1B: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H1C: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].strength = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H1D: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_radius = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H1E: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].default_weight_a = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H1F: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].default_weight_b = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H20: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mask_constant = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H21: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_factor = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H22: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_limit = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H23: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_mode = 'SET'"
			 case &H24: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_mode = 'ADD'"
			 case &H25: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_mode = 'SUB'"
			 case &H26: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_mode = 'MUL'"
			 case &H27: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_mode = 'DIV'"
			 case &H28: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_mode = 'DIF'"
			 case &H29: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_mode = 'AVG'"
			 case &H2A: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_set = 'AND'"
			 case &H2B: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_set = 'OR'"
			 case &H2C: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_set = 'B'"
			 case &H2D: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_set = 'ALL'"
			 case &H2E: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mix_set = 'A'"
			 case &H2F: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].proximity_mode = 'OBJECT'"
			 case &H30: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].proximity_mode = 'GEOMETRY''"
			 case &H31: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mask_constant = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H32: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].min_dist = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H33: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].max_dist = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H34: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].count = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H35: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].constant_offset_displace[0] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H36: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].constant_offset_displace[1] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H37: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].constant_offset_displace[2] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H38: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].relative_offset_displace[0] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H39: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].relative_offset_displace[1] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H3A: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].relative_offset_displace[2] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H3B: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].merge_threshold = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H3C: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].fit_type = 'FIXED_COUNT'"
			 case &H3D: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].fit_type = 'FIT_LENGTH'"
			 case &H3E: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].fit_type = 'FIT_CURVE'"
			 case &H3F: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].width = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H40: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].segments = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H41: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].profile = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H42: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].material = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H43: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].double_threshold = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H44: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].ratio = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H45: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].vertex_group_factor = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H46: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].split_angle = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H47: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].merge_threshold = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H48: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].levels = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H49: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].sculpt_levels = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H4A: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].render_levels = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H4B: print #1, tb+"bpy.ops.object.multires_subdivide(modifier="+chr(34)+modtype+chr(34)+")"
			 case &H4C: print #1, tb+"bpy.ops.object.multires_higher_levels_delete(modifier="+chr(34)+modtype+chr(34)+")"
			 case &H4D: print #1, tb+"bpy.ops.object.multires_base_apply(modifier="+chr(34)+modtype+chr(34)+")"
			 case &H4E: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].merge_threshold = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H4F: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].octree_depth = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H50: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].scale_x = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H51: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].scale_y = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H52: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].scale = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H53: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].sharpness = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H54: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].threshold = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H55: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mode = 'BLOCKS'"
			 case &H56: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mode = 'SMOOTH'"
			 case &H57: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mode = 'SHARP'"
			 case &H58: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mode = 'VERTEX_GROUP'"
			 case &H59: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mode = 'ARMATURE'"
			 case &H5A: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].octree_depth = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H5B: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].sharpness = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H5C: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].threshold = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H5D: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].angle = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H5E: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].steps = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H5F: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].render_steps = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H60: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].iterations = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H61: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].screw_offset = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H62: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].merge_threshold = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H63: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].branch_smoothing = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H64: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].thickness = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H65: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].thickness_clamp = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H66: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].offset = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H67: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].thickness_vertex_group = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H68: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].edge_crease_inner = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H69: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].edge_crease_outer = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H6A: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].edge_crease_rim = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H6B: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].material_offset = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H6C: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].material_offset_rim = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H6D: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].levels = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H6E: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].render_levels = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H6F: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].subdivision_type = 'SIMPLE'"
			 case &H70: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].subdivision_type = 'CATMULL_CLARK'"
			 case &H71: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].show_only_control_edges = True"
			 case &H72: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].show_only_control_edges = False"
			 case &H73: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].use_subsurf_uv = False"
			 case &H74: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].use_subsurf_uv = True"
			 case &H75: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].quad_method = 'BEAUTY'"
			 case &H76: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].quad_method = 'FIXED'"
			 case &H77: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].quad_method = 'FIXED_ALTERNATE'"
			 case &H78: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].quad_method = 'SHORTEST_DIAGONAL'"
			 case &H79: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].ngon_method = 'BEAUTY'"
			 case &H7A: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].ngon_method = 'CLIP'"
			 case &H7B: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].thickness = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H7C: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].offset = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H7D: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].vertex_group = "+chr(34)
			 case &H7E: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].crease_weight = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H7F: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].material_offset = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H80: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].cast_type = 'SPHERE'"
			 case &H81: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].cast_type = 'CYLINDER'"
			 case &H82: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].cast_type = 'CUBOID'"
			 case &H83: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].radius = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H84: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].size = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H85: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].factor = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H86: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].smooth_type = 'SIMPLE'"
			 case &H87: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].smooth_type = 'LENGTH_WEIGHTED'"
			 case &H88: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].rest_source = 'ORCO'"
			 case &H89: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].rest_source = 'BIND'"
			 case &H8A: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].mid_level = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H8B: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].strength = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H8C: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].iterations = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H8D: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].lambda_factor = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H8E: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].lambda_border = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H8F: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].iterations = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H90: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].strength = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H91: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].precision = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H92: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].offset = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H93: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].wrap_method = 'NEAREST_SURFACEPOINT'"
			 case &H94: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].wrap_method = 'PROJECT'"
			 case &H95: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].project_limit = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H96: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].subsurf_levels = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H97: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].wrap_method = 'NEAREST_VERTEX'"
			 case &H98: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].angle = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H99: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].limits[1] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H9A: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].limits[0] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &H9B: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].deform_method = 'BEND'"
			 case &H9C: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].deform_method = 'TAPER'"
			 case &H9D: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].deform_method = 'STRETCH'"
			 case &H9E: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].deform_method = 'TWIST'"
			 case &H9F: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].factor = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HA0: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].iterations = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HA1: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].texture_coords = 'LOCAL'"
			 case &HA2: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].texture_coords = 'GLOBAL'"
			 case &HA3: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].texture_coords = 'OBJECT'"
			 case &HA4: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].texture_coords = 'UV'"
			 case &HA5: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].time_offset = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HA6: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].lifetime = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HA7: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].damping_time = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HA8: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].start_position_x = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HA9: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].start_position_y = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HAA: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].falloff_radius = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HAB: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].speed = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HAC: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].height = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HAD: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].width = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HAE: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].narrowness = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HAF: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.quality = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HB0: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.time_scale = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HB1: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.mass = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HB2: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.spring_damping = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HB3: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.air_damping = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HB4: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.vel_damping = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HB5: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.bending_stiffness = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HB6: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.structural_stiffness = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HB7: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.friction = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HB8: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.speed = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HB9: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.quality = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HBA: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.start_time = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HBB: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.end_time = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HBC: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.attraction_strength = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HBD: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.attraction_radius = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HBE: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.velocity_radius = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HBF: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.velocity_strength = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HC0: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.particle_influence = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HC1: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.alpha_influence = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HC2: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.inflow_velocity[0] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HC3: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.inflow_velocity[1] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HC4: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.inflow_velocity[2] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HC5: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.partial_slip_factor = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HC6: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.impact_factor = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HC7: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.initial_velocity[0] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HC8: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.initial_velocity[1] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HC9: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.initial_velocity[2] = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HCA: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.resolution = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HCB: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.preview_resolution = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HCC: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.simulation_rate = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))
			 case &HCD: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].settings.frame_offset = "+str(mem64(sys_offset+&HCB))+"."+str(mem64(sys_offset+&HCE))                                                
			 case &HCE: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].use_constant_offset = True"
			 case &HCF: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].use_object_offset = True"
			 case &HD0: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].use_merge_vertices = True"
			 case &HD1: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].use_merge_vertices_cap = True"
			 case &HD2: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].use_constant_offset = False"
			 case &HD3: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].use_object_offset = False"
			 case &HD4: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].use_merge_vertices = False"
			 case &HD5: print #1, tb+"bpy.context.object.modifiers["+chr(34)+modtype+chr(34)+"].use_merge_vertices_cap = False"			 
	  end select 
case &H1F
      select case mem64(sys_offset+&HC8)
             case &H01 to &H09: modtype = modtype + ".00" + str(mem64(sys_offset+&HC8))
             case &H0A to &H64: modtype = modtype + ".0"  + str(mem64(sys_offset+&HC8))
             case else:         modtype = modtype         + str(mem64(sys_offset+&HC8))
      end select
